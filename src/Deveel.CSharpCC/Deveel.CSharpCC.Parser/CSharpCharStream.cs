/* Generated By:CSharpCC: Do not edit this line. CSharpCharStream.cs Version 3.3 */
/**
 * This file contains the code for JavaCCParser generated
 * by CSharpCCParser itself.
 */

namespace Deveel.CSharpCC.Parser {


/// <summary>
/// An implementation of interface CharStream, where the stream is assumed to
/// contain only ASCII characters (with unicode escape processing).
/// </summary>

internal  class CSharpCharStream {
  public static readonly bool staticFlag = false;
  static int hexval(char c) {
    switch(c) {
       case '0' :
          return 0;
       case '1' :
          return 1;
       case '2' :
          return 2;
       case '3' :
          return 3;
       case '4' :
          return 4;
       case '5' :
          return 5;
       case '6' :
          return 6;
       case '7' :
          return 7;
       case '8' :
          return 8;
       case '9' :
          return 9;

       case 'a' :
       case 'A' :
          return 10;
       case 'b' :
       case 'B' :
          return 11;
       case 'c' :
       case 'C' :
          return 12;
       case 'd' :
       case 'D' :
          return 13;
       case 'e' :
       case 'E' :
          return 14;
       case 'f' :
       case 'F' :
          return 15;
    }

    throw new System.IO.IOException(); // illegal hex character found
  }

  public int bufpos = -1;
  int bufsize;
  int available;
  int tokenBegin;
  protected int[] bufline;
  protected int[] bufcolumn;

  protected int column = 0;
  protected int line = 1;

  protected bool prevCharIsCR = false;
  protected bool prevCharIsLF = false;

  protected System.IO.TextReader inputStream;

  protected char[] nextCharBuf;
  protected char[] buffer;
  protected int maxNextCharInd = 0;
  protected int nextCharInd = -1;
  protected int inBuf = 0;

  protected void ExpandBuff(bool wrapAround) {
     char[] newbuffer = new char[bufsize + 2048];
     int[] newbufline = new int[bufsize + 2048];
     int[] newbufcolumn = new int[bufsize + 2048];

     try {
        if (wrapAround) {
           System.Array.Copy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           System.Array.Copy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
           buffer = newbuffer;

           System.Array.Copy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           System.Array.Copy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
           bufline = newbufline;

           System.Array.Copy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           System.Array.Copy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
           bufcolumn = newbufcolumn;

           bufpos += (bufsize - tokenBegin);
        } else {
           System.Array.Copy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           buffer = newbuffer;

           System.Array.Copy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           bufline = newbufline;

           System.Array.Copy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           bufcolumn = newbufcolumn;

           bufpos -= tokenBegin;
        }
     } catch (System.Exception e) {
        throw new System.SystemException(e.Message);
     }

     available = (bufsize += 2048);
     tokenBegin = 0;
  }

  protected void FillBuff() {
     int i;
     if (maxNextCharInd == 4096)
        maxNextCharInd = nextCharInd = 0;

     try {
        if ((i = inputStream.Read(nextCharBuf, maxNextCharInd,
                                            4096 - maxNextCharInd)) == -1) {
           inputStream.Close();
           throw new System.IO.IOException();
        } else
           maxNextCharInd += i;
        return;
     } catch(System.IO.IOException e) {
        if (bufpos != 0) {
           --bufpos;
           Backup(0);
        }
        else {
           bufline[bufpos] = line;
           bufcolumn[bufpos] = column;
        }
        throw e;
     }
  }

  protected char ReadByte() {
     if (++nextCharInd >= maxNextCharInd)
        FillBuff();
     if(nextCharInd >= maxNextCharInd) {
        nextCharInd--;
        if(nextCharInd < 0)
           nextCharInd += 4096;
        throw new System.IO.EndOfStreamException();
     }

     return nextCharBuf[nextCharInd];
  }

  public char BeginToken() {
     if (inBuf > 0) {
        --inBuf;

        if (++bufpos == bufsize)
           bufpos = 0;

        tokenBegin = bufpos;
        return buffer[bufpos];
     }

     tokenBegin = 0;
     bufpos = -1;

     return ReadChar();
  }     

  protected void AdjustBuffSize() {
     if (available == bufsize) {
        if (tokenBegin > 2048) {
           bufpos = 0;
           available = tokenBegin;
        }
        else
           ExpandBuff(false);
     } else if (available > tokenBegin)
        available = bufsize;
     else if ((tokenBegin - available) < 2048)
        ExpandBuff(true);
     else
        available = tokenBegin;
  }

  protected void UpdateLineColumn(char c) {
     column++;

     if (prevCharIsLF) {
        prevCharIsLF = false;
        line += (column = 1);
     } else if (prevCharIsCR) {
        prevCharIsCR = false;
        if (c == '\n') {
           prevCharIsLF = true;
        } else
           line += (column = 1);
     }

     switch (c) {
        case '\r' :
           prevCharIsCR = true;
           break;
        case '\n' :
           prevCharIsLF = true;
           break;
        case '\t' :
           column--;
           column += (8 - (column & 07));
           break;
        default :
           break;
     }

     bufline[bufpos] = line;
     bufcolumn[bufpos] = column;
  }

  public char ReadChar() {
     if (inBuf > 0) {
        --inBuf;

        if (++bufpos == bufsize)
           bufpos = 0;

        return buffer[bufpos];
     }

     char c;

     if (++bufpos == available)
        AdjustBuffSize();

     try {
        if ((buffer[bufpos] = c = ReadByte()) == '\\') {
           UpdateLineColumn(c);

           int backSlashCnt = 1;

           for (;;) { // Read all the backslashes
              if (++bufpos == available)
                 AdjustBuffSize();

              try {
                 if ((buffer[bufpos] = c = ReadByte()) != '\\') {
                    UpdateLineColumn(c);
                    // found a non-backslash char.
                    if ((c == 'u') && ((backSlashCnt & 1) == 1)) {
                       --bufpos;   // set bufpos to position of last backslash
                       break;
                    }

                    Backup(backSlashCnt);
                    return '\\';
                 }
              } catch(System.IO.IOException) {
                 bufpos--;         // cannot become negative because of first backslash

                 if (backSlashCnt > 1)
                    Backup(backSlashCnt);

                 return '\\';
              }

              UpdateLineColumn(c);
              backSlashCnt++;
           }

           // Here, we have seen an odd number of backslash's followed by a 'u'

           int escStartColumn = column - 1;

           try {
              while ((c = ReadByte()) == 'u')
                 ++column;

              buffer[bufpos] = c = (char)(hexval(c) << 12 |
                                          hexval(ReadByte()) << 8 |
                                          hexval(ReadByte()) << 4 |
                                          hexval(ReadByte()));

              column += 4;
           } catch(System.IO.IOException) {
              throw new ParseException("Invalid escape sequence at line " + line +
                                            " column " + escStartColumn + ".");
           }

           if (backSlashCnt == 1)
              return c;
           else {
              Backup(backSlashCnt - 1);
              return '\\';
           }
        } else {
           UpdateLineColumn(c);
           return (c);
        }
     } catch(System.IO.IOException e) {
        bufpos--;
        if(bufpos < 0) {
           bufpos = 0;
           bufline[0] = line;
           bufcolumn[0] = column;
        }
        throw e;
     }
  }

[System.Obsolete("Deprecated - use EndColumn instead.", false)]

  public int Column {
    get {
       return bufcolumn[bufpos];
    }
  }

[System.Obsolete("Deprecated - use EndLine instead", false)]

  public int Line {
  get {
       return bufline[bufpos];
    }
  }

  public int EndColumn {
  get {
       return bufcolumn[bufpos];
    }
  }

  public int EndLine {
  get {
       return bufline[bufpos];
    }
  }

  public int BeginColumn {
  get {
       return bufcolumn[tokenBegin];
    }
  }

  public int BeginLine {
  get {
       return bufline[tokenBegin];
    }
  }

  public void Backup(int amount) {

    inBuf += amount;
    if ((bufpos -= amount) < 0)
       bufpos += bufsize;
  }

  public CSharpCharStream(System.IO.TextReader dstream,
                 int startline, int startcolumn, int buffersize)
  {
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    available = bufsize = buffersize;
    buffer = new char[buffersize];
    bufline = new int[buffersize];
    bufcolumn = new int[buffersize];
    nextCharBuf = new char[4096];
  }

  public CSharpCharStream(System.IO.TextReader dstream,
                                        int startline, int startcolumn) :
     this(dstream, startline, startcolumn, 4096) {
  }

  public CSharpCharStream(System.IO.TextReader dstream) :
     this(dstream, 1, 1, 4096) {
  }
  public void ReInit(System.IO.TextReader dstream,
                 int startline, int startcolumn, int buffersize)
  {
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    if (buffer == null || buffersize != buffer.Length) {
      available = bufsize = buffersize;
      buffer = new char[buffersize];
      bufline = new int[buffersize];
      bufcolumn = new int[buffersize];
      nextCharBuf = new char[4096];
    }
    prevCharIsLF = prevCharIsCR = false;
    tokenBegin = inBuf = maxNextCharInd = 0;
    nextCharInd = bufpos = -1;
  }

  public void ReInit(System.IO.TextReader dstream,
                                        int startline, int startcolumn) {
     ReInit(dstream, startline, startcolumn, 4096);
  }

  public void ReInit(System.IO.TextReader dstream) {
     ReInit(dstream, 1, 1, 4096);
  }
  public CSharpCharStream(System.IO.Stream dstream, int startline,
  int startcolumn, int buffersize) :
     this(new System.IO.StreamReader(dstream), startline, startcolumn, 4096) {
  }

  public CSharpCharStream(System.IO.Stream dstream, int startline,
                                                           int startcolumn) :
     this(dstream, startline, startcolumn, 4096) {
  }

  public CSharpCharStream(System.IO.Stream dstream) :
     this(dstream, 1, 1, 4096) {
  }

  public void ReInit(System.IO.Stream dstream, int startline,
  int startcolumn, int buffersize) {
     ReInit(new System.IO.StreamReader(dstream), startline, startcolumn, 4096);
  }
  public void ReInit(System.IO.Stream dstream, int startline,
                                                           int startcolumn) {
     ReInit(dstream, startline, startcolumn, 4096);
  }
  public void ReInit(System.IO.Stream dstream) {
     ReInit(dstream, 1, 1, 4096);
  }

  public string GetImage() {
     if (bufpos >= tokenBegin)
        return new string(buffer, tokenBegin, bufpos - tokenBegin + 1);
     else
        return new string(buffer, tokenBegin, bufsize - tokenBegin) +
                              new string(buffer, 0, bufpos + 1);
  }

  public char[] GetSuffix(int len) {
     char[] ret = new char[len];

     if ((bufpos + 1) >= len)
        System.Array.Copy(buffer, bufpos - len + 1, ret, 0, len);
     else {
        System.Array.Copy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                                                          len - bufpos - 1);
        System.Array.Copy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
     }

     return ret;
  }

  public void Done()
  {
     nextCharBuf = null;
     buffer = null;
     bufline = null;
     bufcolumn = null;
  }

  /// <summary>
  /// Method to adjust line and column numbers for the start of a token.
  /// </summary>
  public void AdjustBeginLineColumn(int newLine, int newCol)
  {
     int start = tokenBegin;
     int len;

     if (bufpos >= tokenBegin) {
        len = bufpos - tokenBegin + inBuf + 1;
     } else {
        len = bufsize - tokenBegin + bufpos + 1 + inBuf;
     }

     int i = 0, j = 0, k = 0;
     int nextColDiff = 0, columnDiff = 0;

     while (i < len &&
            bufline[j = start % bufsize] == bufline[k = ++start % bufsize]) {
        bufline[j] = newLine;
        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
        bufcolumn[j] = newCol + columnDiff;
        columnDiff = nextColDiff;
        i++;
     } 

     if (i < len) {
        bufline[j] = newLine++;
        bufcolumn[j] = newCol + columnDiff;

        while (i++ < len) {
           if (bufline[j = start % bufsize] != bufline[++start % bufsize])
              bufline[j] = newLine++;
           else
              bufline[j] = newLine;
        }
     }

     line = bufline[j];
     column = bufcolumn[j];
  }
}

}
