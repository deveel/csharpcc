/* Generated By:CSharpCC: Do not edit this line. CSharpCCParserTokenManager.cs */
namespace Deveel.CSharpCC.Parser {

using System;
using System.Collections;
using System.Collections.Generic;

public  class CSharpCCParserTokenManager : CSharpCCParserConstants {
   int[] beginLine = new int[10];
   int[] beginCol = new int[10];
   int depth = 0;
   int size = 10;

   void SaveBeginLineCol(int l, int c)
   {
      if (depth == size)
      {
         size += 5;
         int[] tmpbeginLine = new int[size];
         int[] tmpbeginCol = new int[size];

         Array.Copy(beginLine, 0, beginLine = tmpbeginLine, 0, depth);
         Array.Copy(beginCol, 0, beginCol = tmpbeginCol, 0, depth);
      }

      beginLine[depth] = l;
      beginCol[depth] = c;
      depth++;
   }

   void RestoreBeginLineCol()
   {
      depth--;
      input_stream.AdjustBeginLineColumn(beginLine[depth], beginCol[depth]);
   }
  public  System.IO.TextWriter debugStream = Console.Out;
  public  void SetDebugStream(System.IO.TextWriter ds) { debugStream = ds; }
private int mccStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 6946816L) != 0L || (active1 & 2314850208468434944L) != 0L)
            return 2;
         if ((active1 & 34359738368L) != 0L)
            return 8;
         if ((active0 & -134213634L) != 0L || (active1 & 65535L) != 0L || (active2 & 224L) != 0L)
         {
            mccmatchedKind = 139;
            return 32;
         }
         return -1;
      case 1:
         if ((active0 & 6422528L) != 0L)
            return 0;
         if ((active0 & -17453097957715970L) != 0L || (active1 & 65535L) != 0L || (active2 & 160L) != 0L)
         {
            if (mccmatchedPos != 1) {
               mccmatchedKind = 139;
               mccmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 17453097823502336L) != 0L || (active2 & 64L) != 0L)
            return 32;
         return -1;
      case 2:
         if ((active0 & 152137224912111616L) != 0L || (active1 & 2560L) != 0L || (active2 & 32L) != 0L)
            return 32;
         if ((active0 & -161707924010301442L) != 0L || (active1 & 62975L) != 0L || (active2 & 128L) != 0L)
         {
            if (mccmatchedPos != 2) {
               mccmatchedKind = 139;
               mccmatchedPos = 2;
            }
            return 32;
         }
         return -1;
      case 3:
         if ((active0 & -497514192723508002L) != 0L || (active1 & 54495L) != 0L || (active2 & 128L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 3;
            return 32;
         }
         if ((active0 & 342561668154262304L) != 0L || (active1 & 8480L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active0 & -497602266396622690L) != 0L || (active1 & 20635L) != 0L || (active2 & 128L) != 0L)
         {
            if (mccmatchedPos != 4) {
               mccmatchedKind = 139;
               mccmatchedPos = 4;
            }
            return 32;
         }
         if ((active0 & 88073673114688L) != 0L || (active1 & 33860L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active0 & 4611695914032037888L) != 0L || (active1 & 27L) != 0L || (active2 & 128L) != 0L)
            return 32;
         if ((active0 & -5109298180428659554L) != 0L || (active1 & 20608L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 5;
            return 32;
         }
         return -1;
      case 6:
         if ((active0 & -6262255144285502306L) != 0L || (active1 & 16512L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 6;
            return 32;
         }
         if ((active0 & 1152956963856842752L) != 0L || (active1 & 4096L) != 0L)
            return 32;
         return -1;
      case 7:
         if ((active0 & 2380152403065308318L) != 0L || (active1 & 128L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 7;
            return 32;
         }
         if ((active0 & -8642407547350810624L) != 0L || (active1 & 16384L) != 0L)
            return 32;
         return -1;
      case 8:
         if ((active0 & 1180L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 8;
            return 32;
         }
         if ((active0 & 2380152403065307138L) != 0L || (active1 & 128L) != 0L)
            return 32;
         return -1;
      case 9:
         if ((active0 & 1164L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 9;
            return 32;
         }
         if ((active0 & 16L) != 0L)
            return 32;
         return -1;
      case 10:
         if ((active0 & 1160L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 10;
            return 32;
         }
         if ((active0 & 4L) != 0L)
            return 32;
         return -1;
      case 11:
         if ((active0 & 1152L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 11;
            return 32;
         }
         if ((active0 & 8L) != 0L)
            return 32;
         return -1;
      case 12:
         if ((active0 & 1024L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 12;
            return 32;
         }
         if ((active0 & 128L) != 0L)
            return 32;
         return -1;
      case 13:
         if ((active0 & 1024L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 13;
            return 32;
         }
         return -1;
      default :
         return -1;
   }
}
private int mccStartNfa_0(int pos, long active0, long active1, long active2)
{
   return mccMoveNfa_0(mccStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int mccStopAtPos(int pos, int kind)
{
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   return pos + 1;
}
private int mccStartNfaWithStates_0(int pos, int kind, int state) {
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) { return pos + 1; }
   return mccMoveNfa_0(state, pos + 1);
}
private int mccMoveStringLiteralDfa0_0()
{
   switch((int)curChar) {
      case 33:
         mccmatchedKind = 102;
         return mccMoveStringLiteralDfa1_0(0L, 35184372088832L, 0L);
      case 35:
         return mccStopAtPos(0, 132);
      case 37:
         mccmatchedKind = 121;
         return mccMoveStringLiteralDfa1_0(0L, 0L, 2L);
      case 38:
         mccmatchedKind = 118;
         return mccMoveStringLiteralDfa1_0(0L, 4611826755915743232L, 0L);
      case 40:
         return mccStopAtPos(0, 91);
      case 41:
         return mccStopAtPos(0, 92);
      case 42:
         mccmatchedKind = 116;
         return mccMoveStringLiteralDfa1_0(0L, 1152921504606846976L, 0L);
      case 43:
         mccmatchedKind = 114;
         return mccMoveStringLiteralDfa1_0(0L, 288511851128422400L, 0L);
      case 44:
         return mccStopAtPos(0, 98);
      case 45:
         mccmatchedKind = 115;
         return mccMoveStringLiteralDfa1_0(0L, 577023702256844800L, 0L);
      case 46:
         return mccStartNfaWithStates_0(0, 99, 8);
      case 47:
         mccmatchedKind = 117;
         return mccMoveStringLiteralDfa1_0(6946816L, 2305843009213693952L, 0L);
      case 58:
         return mccStopAtPos(0, 105);
      case 59:
         return mccStopAtPos(0, 97);
      case 60:
         mccmatchedKind = 101;
         return mccMoveStringLiteralDfa1_0(0L, 8796093022208L, 1280L);
      case 61:
         mccmatchedKind = 100;
         return mccMoveStringLiteralDfa1_0(0L, 4398046511104L, 0L);
      case 62:
         mccmatchedKind = 131;
         return mccMoveStringLiteralDfa1_0(0L, 17592186044416L, 516L);
      case 63:
         return mccStopAtPos(0, 104);
      case 67:
         return mccMoveStringLiteralDfa1_0(32L, 0L, 0L);
      case 69:
         return mccMoveStringLiteralDfa1_0(2048L, 0L, 0L);
      case 73:
         return mccMoveStringLiteralDfa1_0(4L, 0L, 0L);
      case 76:
         return mccMoveStringLiteralDfa1_0(2L, 0L, 0L);
      case 77:
         return mccMoveStringLiteralDfa1_0(256L, 0L, 0L);
      case 80:
         return mccMoveStringLiteralDfa1_0(24L, 0L, 0L);
      case 83:
         return mccMoveStringLiteralDfa1_0(640L, 0L, 0L);
      case 84:
         return mccMoveStringLiteralDfa1_0(1088L, 0L, 0L);
      case 91:
         return mccStopAtPos(0, 95);
      case 93:
         return mccStopAtPos(0, 96);
      case 94:
         mccmatchedKind = 120;
         return mccMoveStringLiteralDfa1_0(0L, 0L, 1L);
      case 97:
         return mccMoveStringLiteralDfa1_0(134217728L, 0L, 0L);
      case 98:
         return mccMoveStringLiteralDfa1_0(4026531840L, 0L, 0L);
      case 99:
         return mccMoveStringLiteralDfa1_0(270582939648L, 0L, 0L);
      case 100:
         return mccMoveStringLiteralDfa1_0(1924145348608L, 0L, 0L);
      case 101:
         return mccMoveStringLiteralDfa1_0(15393162788864L, 0L, 0L);
      case 102:
         return mccMoveStringLiteralDfa1_0(263882790666240L, 0L, 0L);
      case 103:
         return mccMoveStringLiteralDfa1_0(281474976710656L, 0L, 0L);
      case 105:
         return mccMoveStringLiteralDfa1_0(17451448556060672L, 0L, 64L);
      case 108:
         return mccMoveStringLiteralDfa1_0(54043195528445952L, 0L, 0L);
      case 110:
         return mccMoveStringLiteralDfa1_0(504403158265495552L, 0L, 0L);
      case 111:
         return mccMoveStringLiteralDfa1_0(576460752303423488L, 0L, 32L);
      case 112:
         return mccMoveStringLiteralDfa1_0(8070450532247928832L, 0L, 128L);
      case 114:
         return mccMoveStringLiteralDfa1_0(-9223372036854775808L, 1L, 0L);
      case 115:
         return mccMoveStringLiteralDfa1_0(0L, 30L, 0L);
      case 116:
         return mccMoveStringLiteralDfa1_0(0L, 992L, 0L);
      case 117:
         return mccMoveStringLiteralDfa1_0(0L, 1024L, 0L);
      case 118:
         return mccMoveStringLiteralDfa1_0(0L, 30720L, 0L);
      case 119:
         return mccMoveStringLiteralDfa1_0(0L, 32768L, 0L);
      case 123:
         return mccStopAtPos(0, 93);
      case 124:
         mccmatchedKind = 119;
         return mccMoveStringLiteralDfa1_0(0L, -9223301668110598144L, 0L);
      case 125:
         return mccStopAtPos(0, 94);
      case 126:
         return mccStopAtPos(0, 103);
      default :
         return mccMoveNfa_0(3, 0);
   }
}
private int mccMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch((int)curChar) {
      case 38:
         if ((active1 & 140737488355328L) != 0L)
            return mccStopAtPos(1, 111);
         break;
      case 42:
         if ((active0 & 2097152L) != 0L)
         {
            mccmatchedKind = 21;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 4325376L, active1, 0L, active2, 0L);
      case 43:
         if ((active1 & 281474976710656L) != 0L)
            return mccStopAtPos(1, 112);
         break;
      case 45:
         if ((active1 & 562949953421312L) != 0L)
            return mccStopAtPos(1, 113);
         break;
      case 47:
         if ((active0 & 524288L) != 0L)
            return mccStopAtPos(1, 19);
         break;
      case 60:
         if ((active2 & 1024L) != 0L)
         {
            mccmatchedKind = 138;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 256L);
      case 61:
         if ((active1 & 4398046511104L) != 0L)
            return mccStopAtPos(1, 106);
         else if ((active1 & 8796093022208L) != 0L)
            return mccStopAtPos(1, 107);
         else if ((active1 & 17592186044416L) != 0L)
            return mccStopAtPos(1, 108);
         else if ((active1 & 35184372088832L) != 0L)
            return mccStopAtPos(1, 109);
         else if ((active1 & 288230376151711744L) != 0L)
            return mccStopAtPos(1, 122);
         else if ((active1 & 576460752303423488L) != 0L)
            return mccStopAtPos(1, 123);
         else if ((active1 & 1152921504606846976L) != 0L)
            return mccStopAtPos(1, 124);
         else if ((active1 & 2305843009213693952L) != 0L)
            return mccStopAtPos(1, 125);
         else if ((active1 & 4611686018427387904L) != 0L)
            return mccStopAtPos(1, 126);
         else if ((active1 & -9223372036854775808L) != 0L)
            return mccStopAtPos(1, 127);
         else if ((active2 & 1L) != 0L)
            return mccStopAtPos(1, 128);
         else if ((active2 & 2L) != 0L)
            return mccStopAtPos(1, 129);
         break;
      case 62:
         if ((active2 & 4L) != 0L)
         {
            mccmatchedKind = 130;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 512L);
      case 65:
         return mccMoveStringLiteralDfa2_0(active0, 24L, active1, 0L, active2, 0L);
      case 71:
         return mccMoveStringLiteralDfa2_0(active0, 4L, active1, 0L, active2, 0L);
      case 75:
         return mccMoveStringLiteralDfa2_0(active0, 512L, active1, 0L, active2, 0L);
      case 79:
         return mccMoveStringLiteralDfa2_0(active0, 3426L, active1, 0L, active2, 0L);
      case 80:
         return mccMoveStringLiteralDfa2_0(active0, 128L, active1, 0L, active2, 0L);
      case 97:
         return mccMoveStringLiteralDfa2_0(active0, 72075199377309696L, active1, 2048L, active2, 128L);
      case 98:
         return mccMoveStringLiteralDfa2_0(active0, 134217728L, active1, 0L, active2, 0L);
      case 101:
         return mccMoveStringLiteralDfa2_0(active0, -9079256573901012992L, active1, 3L, active2, 0L);
      case 102:
         if ((active0 & 562949953421312L) != 0L)
            return mccStartNfaWithStates_0(1, 49, 32);
         break;
      case 104:
         return mccMoveStringLiteralDfa2_0(active0, 17179869184L, active1, 32868L, active2, 0L);
      case 105:
         return mccMoveStringLiteralDfa2_0(active0, 35184372088832L, active1, 4096L, active2, 0L);
      case 108:
         return mccMoveStringLiteralDfa2_0(active0, 72602127171584L, active1, 0L, active2, 0L);
      case 110:
         if ((active2 & 64L) != 0L)
         {
            mccmatchedKind = 134;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 7885697394409472L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 549755813888L) != 0L)
         {
            mccmatchedKind = 39;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 54466714200440832L, active1, 24576L, active2, 0L);
      case 114:
         return mccMoveStringLiteralDfa2_0(active0, 3458764514894282752L, active1, 896L, active2, 0L);
      case 115:
         if ((active0 & 9007199254740992L) != 0L)
            return mccStartNfaWithStates_0(1, 53, 32);
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 1024L, active2, 0L);
      case 116:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 8L, active2, 0L);
      case 117:
         return mccMoveStringLiteralDfa2_0(active0, 4899916394579099648L, active1, 0L, active2, 32L);
      case 118:
         return mccMoveStringLiteralDfa2_0(active0, 576460752303423488L, active1, 0L, active2, 0L);
      case 119:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 16L, active2, 0L);
      case 120:
         return mccMoveStringLiteralDfa2_0(active0, 8796093022208L, active1, 0L, active2, 0L);
      case 121:
         return mccMoveStringLiteralDfa2_0(active0, 2147483648L, active1, 0L, active2, 0L);
      case 124:
         if ((active1 & 70368744177664L) != 0L)
            return mccStopAtPos(1, 110);
         break;
      default :
         break;
   }
   return mccStartNfa_0(0, active0, active1, active2);
}
private int mccMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch((int)curChar) {
      case 61:
         if ((active2 & 256L) != 0L)
            return mccStopAtPos(2, 136);
         else if ((active2 & 512L) != 0L)
            return mccStopAtPos(2, 137);
         break;
      case 64:
         return mccMoveStringLiteralDfa3_0(active0, 4325376L, active1, 0L, active2, 0L);
      case 68:
         return mccMoveStringLiteralDfa3_0(active0, 32L, active1, 0L, active2, 0L);
      case 69:
         return mccMoveStringLiteralDfa3_0(active0, 128L, active1, 0L, active2, 0L);
      case 70:
         if ((active0 & 2048L) != 0L)
            return mccStartNfaWithStates_0(2, 11, 32);
         break;
      case 73:
         return mccMoveStringLiteralDfa3_0(active0, 512L, active1, 0L, active2, 0L);
      case 75:
         return mccMoveStringLiteralDfa3_0(active0, 1088L, active1, 0L, active2, 0L);
      case 78:
         return mccMoveStringLiteralDfa3_0(active0, 4L, active1, 0L, active2, 0L);
      case 79:
         return mccMoveStringLiteralDfa3_0(active0, 2L, active1, 0L, active2, 0L);
      case 82:
         return mccMoveStringLiteralDfa3_0(active0, 280L, active1, 0L, active2, 0L);
      case 97:
         return mccMoveStringLiteralDfa3_0(active0, -9223371985315168256L, active1, 138L, active2, 0L);
      case 98:
         return mccMoveStringLiteralDfa3_0(active0, 4611686018427387904L, active1, 0L, active2, 0L);
      case 99:
         return mccMoveStringLiteralDfa3_0(active0, 18014398509481984L, active1, 0L, active2, 0L);
      case 101:
         return mccMoveStringLiteralDfa3_0(active0, 576460753377165312L, active1, 0L, active2, 0L);
      case 102:
         return mccMoveStringLiteralDfa3_0(active0, 274877906944L, active1, 0L, active2, 0L);
      case 105:
         return mccMoveStringLiteralDfa3_0(active0, 1152921504606846976L, active1, 42032L, active2, 0L);
      case 108:
         return mccMoveStringLiteralDfa3_0(active0, 288247968337756160L, active1, 16384L, active2, 0L);
      case 109:
         return mccMoveStringLiteralDfa3_0(active0, 72057594037927936L, active1, 0L, active2, 0L);
      case 110:
         return mccMoveStringLiteralDfa3_0(active0, 36064187549483008L, active1, 0L, active2, 0L);
      case 111:
         return mccMoveStringLiteralDfa3_0(active0, 2305913378494742528L, active1, 4L, active2, 0L);
      case 114:
         if ((active0 & 140737488355328L) != 0L)
            return mccStartNfaWithStates_0(2, 47, 32);
         else if ((active1 & 2048L) != 0L)
            return mccStartNfaWithStates_0(2, 75, 32);
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 4160L, active2, 128L);
      case 115:
         return mccMoveStringLiteralDfa3_0(active0, 2203720876032L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 50;
            mccmatchedPos = 2;
         }
         else if ((active2 & 32L) != 0L)
            return mccStartNfaWithStates_0(2, 133, 32);
         return mccMoveStringLiteralDfa3_0(active0, 7045681248206848L, active1, 1L, active2, 0L);
      case 117:
         return mccMoveStringLiteralDfa3_0(active0, 5497558138880L, active1, 256L, active2, 0L);
      case 119:
         if ((active0 & 144115188075855872L) != 0L)
            return mccStartNfaWithStates_0(2, 57, 32);
         break;
      case 121:
         if ((active1 & 512L) != 0L)
            return mccStartNfaWithStates_0(2, 73, 32);
         break;
      default :
         break;
   }
   return mccStartNfa_0(1, active0, active1, active2);
}
private int mccMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch((int)curChar) {
      case 67:
         return mccMoveStringLiteralDfa4_0(active0, 128L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 32L) != 0L)
            return mccStartNfaWithStates_0(3, 5, 32);
         else if ((active0 & 256L) != 0L)
            return mccStartNfaWithStates_0(3, 8, 32);
         return mccMoveStringLiteralDfa4_0(active0, 1088L, active1, 0L, active2, 0L);
      case 75:
         return mccMoveStringLiteralDfa4_0(active0, 2L, active1, 0L, active2, 0L);
      case 79:
         return mccMoveStringLiteralDfa4_0(active0, 4L, active1, 0L, active2, 0L);
      case 80:
         if ((active0 & 512L) != 0L)
            return mccStartNfaWithStates_0(3, 9, 32);
         break;
      case 83:
         return mccMoveStringLiteralDfa4_0(active0, 24L, active1, 0L, active2, 0L);
      case 97:
         return mccMoveStringLiteralDfa4_0(active0, 105829067915264L, active1, 16384L, active2, 128L);
      case 98:
         return mccMoveStringLiteralDfa4_0(active0, 1099515822080L, active1, 0L, active2, 0L);
      case 99:
         return mccMoveStringLiteralDfa4_0(active0, 8589934592L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 8192L) != 0L)
            return mccStartNfaWithStates_0(3, 77, 32);
         return mccMoveStringLiteralDfa4_0(active0, -9223372036854775808L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 268435456L) != 0L)
            return mccStartNfaWithStates_0(3, 28, 32);
         else if ((active0 & 2147483648L) != 0L)
            return mccStartNfaWithStates_0(3, 31, 32);
         else if ((active0 & 4294967296L) != 0L)
            return mccStartNfaWithStates_0(3, 32, 32);
         else if ((active0 & 2199023255552L) != 0L)
            return mccStartNfaWithStates_0(3, 41, 32);
         else if ((active1 & 256L) != 0L)
            return mccStartNfaWithStates_0(3, 72, 32);
         return mccMoveStringLiteralDfa4_0(active0, 78821789572136960L, active1, 0L, active2, 0L);
      case 103:
         if ((active0 & 36028797018963968L) != 0L)
            return mccStartNfaWithStates_0(3, 55, 32);
         break;
      case 107:
         if ((active0 & 18014398509481984L) != 0L)
            return mccStartNfaWithStates_0(3, 54, 32);
         break;
      case 108:
         if ((active0 & 536870912L) != 0L)
            return mccStartNfaWithStates_0(3, 29, 32);
         else if ((active0 & 288230376151711744L) != 0L)
            return mccStartNfaWithStates_0(3, 58, 32);
         return mccMoveStringLiteralDfa4_0(active0, 4611686018427387904L, active1, 32770L, active2, 0L);
      case 109:
         if ((active0 & 4398046511104L) != 0L)
            return mccStartNfaWithStates_0(3, 42, 32);
         break;
      case 110:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 1152L, active2, 0L);
      case 111:
         if ((active0 & 281474976710656L) != 0L)
            return mccStartNfaWithStates_0(3, 48, 32);
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 64L, active2, 0L);
      case 114:
         if ((active0 & 17179869184L) != 0L)
            return mccStartNfaWithStates_0(3, 34, 32);
         return mccMoveStringLiteralDfa4_0(active0, 576460752303423488L, active1, 4L, active2, 0L);
      case 115:
         if ((active1 & 32L) != 0L)
            return mccStartNfaWithStates_0(3, 69, 32);
         return mccMoveStringLiteralDfa4_0(active0, 17695265259520L, active1, 0L, active2, 0L);
      case 116:
         return mccMoveStringLiteralDfa4_0(active0, 2305843146786865152L, active1, 4120L, active2, 0L);
      case 117:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 1L, active2, 0L);
      case 118:
         return mccMoveStringLiteralDfa4_0(active0, 1152921504606846976L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return mccStartNfa_0(2, active0, active1, active2);
}
private int mccMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa5_0(active0, 2L, active1, 0L, active2, 0L);
      case 69:
         return mccMoveStringLiteralDfa5_0(active0, 24L, active1, 0L, active2, 0L);
      case 73:
         return mccMoveStringLiteralDfa5_0(active0, 128L, active1, 0L, active2, 0L);
      case 78:
         if ((active0 & 64L) != 0L)
         {
            mccmatchedKind = 6;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 1024L, active1, 0L, active2, 0L);
      case 82:
         return mccMoveStringLiteralDfa5_0(active0, 4L, active1, 0L, active2, 0L);
      case 97:
         return mccMoveStringLiteralDfa5_0(active0, 1152921504606846976L, active1, 0L, active2, 0L);
      case 99:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 16L, active2, 0L);
      case 101:
         if ((active0 & 17592186044416L) != 0L)
            return mccStartNfaWithStates_0(4, 44, 32);
         else if ((active1 & 32768L) != 0L)
            return mccStartNfaWithStates_0(4, 79, 32);
         return mccMoveStringLiteralDfa5_0(active0, 2305843009213693952L, active1, 2L, active2, 0L);
      case 103:
         if ((active1 & 1024L) != 0L)
            return mccStartNfaWithStates_0(4, 74, 32);
         return mccMoveStringLiteralDfa5_0(active0, 4325376L, active1, 0L, active2, 0L);
      case 104:
         if ((active0 & 8589934592L) != 0L)
            return mccStartNfaWithStates_0(4, 33, 32);
         break;
      case 105:
         return mccMoveStringLiteralDfa5_0(active0, 4611686155866341376L, active1, 8L, active2, 0L);
      case 107:
         if ((active0 & 1073741824L) != 0L)
            return mccStartNfaWithStates_0(4, 30, 32);
         break;
      case 108:
         return mccMoveStringLiteralDfa5_0(active0, 36283883716608L, active1, 0L, active2, 0L);
      case 109:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 128L);
      case 111:
         return mccMoveStringLiteralDfa5_0(active0, -9223372036854775808L, active1, 0L, active2, 0L);
      case 114:
         return mccMoveStringLiteralDfa5_0(active0, 583224947971719168L, active1, 1L, active2, 0L);
      case 115:
         if ((active0 & 34359738368L) != 0L)
            return mccStartNfaWithStates_0(4, 35, 32);
         return mccMoveStringLiteralDfa5_0(active0, 72057594037927936L, active1, 128L, active2, 0L);
      case 116:
         if ((active0 & 68719476736L) != 0L)
            return mccStartNfaWithStates_0(4, 36, 32);
         else if ((active0 & 70368744177664L) != 0L)
            return mccStartNfaWithStates_0(4, 46, 32);
         else if ((active1 & 4L) != 0L)
            return mccStartNfaWithStates_0(4, 66, 32);
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 16384L, active2, 0L);
      case 117:
         return mccMoveStringLiteralDfa5_0(active0, 274877906944L, active1, 4096L, active2, 0L);
      case 119:
         if ((active1 & 64L) != 0L)
            return mccStartNfaWithStates_0(4, 70, 32);
         break;
      default :
         break;
   }
   return mccStartNfa_0(3, active0, active1, active2);
}
private int mccMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa6_0(active0, 128L, active1, 0L, active2, 0L);
      case 69:
         return mccMoveStringLiteralDfa6_0(active0, 4L, active1, 0L, active2, 0L);
      case 72:
         return mccMoveStringLiteralDfa6_0(active0, 2L, active1, 0L, active2, 0L);
      case 82:
         return mccMoveStringLiteralDfa6_0(active0, 24L, active1, 0L, active2, 0L);
      case 95:
         return mccMoveStringLiteralDfa6_0(active0, 1024L, active1, 0L, active2, 0L);
      case 97:
         return mccMoveStringLiteralDfa6_0(active0, 134217728L, active1, 4096L, active2, 0L);
      case 99:
         if ((active0 & 4611686018427387904L) != 0L)
            return mccStartNfaWithStates_0(5, 62, 32);
         else if ((active1 & 8L) != 0L)
            return mccStartNfaWithStates_0(5, 67, 32);
         return mccMoveStringLiteralDfa6_0(active0, 2305843009213693952L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 2L) != 0L)
            return mccStartNfaWithStates_0(5, 65, 32);
         break;
      case 101:
         if ((active0 & 1099511627776L) != 0L)
            return mccStartNfaWithStates_0(5, 40, 32);
         return mccMoveStringLiteralDfa6_0(active0, 4325376L, active1, 0L, active2, 0L);
      case 102:
         return mccMoveStringLiteralDfa6_0(active0, 2251799813685248L, active1, 0L, active2, 0L);
      case 104:
         if ((active1 & 16L) != 0L)
            return mccStartNfaWithStates_0(5, 68, 32);
         break;
      case 105:
         return mccMoveStringLiteralDfa6_0(active0, 576460752303423488L, active1, 16512L, active2, 0L);
      case 108:
         return mccMoveStringLiteralDfa6_0(active0, 35459249995776L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 8796093022208L) != 0L)
            return mccStartNfaWithStates_0(5, 43, 32);
         else if ((active1 & 1L) != 0L)
            return mccStartNfaWithStates_0(5, 64, 32);
         return mccMoveStringLiteralDfa6_0(active0, -9218868299788451840L, active1, 0L, active2, 0L);
      case 112:
         return mccMoveStringLiteralDfa6_0(active0, 72057594037927936L, active1, 0L, active2, 0L);
      case 115:
         if ((active2 & 128L) != 0L)
            return mccStartNfaWithStates_0(5, 135, 32);
         break;
      case 116:
         return mccMoveStringLiteralDfa6_0(active0, 1152921504606846976L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return mccStartNfa_0(4, active0, active1, active2);
}
private int mccMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch((int)curChar) {
      case 69:
         return mccMoveStringLiteralDfa7_0(active0, 2L, active1, 0L);
      case 76:
         return mccMoveStringLiteralDfa7_0(active0, 128L, active1, 0L);
      case 77:
         return mccMoveStringLiteralDfa7_0(active0, 1024L, active1, 0L);
      case 95:
         return mccMoveStringLiteralDfa7_0(active0, 28L, active1, 0L);
      case 97:
         return mccMoveStringLiteralDfa7_0(active0, 78812993478983680L, active1, 0L);
      case 99:
         return mccMoveStringLiteralDfa7_0(active0, 134217728L, active1, 0L);
      case 100:
         return mccMoveStringLiteralDfa7_0(active0, 576460752303423488L, active1, 0L);
      case 101:
         if ((active0 & 1152921504606846976L) != 0L)
            return mccStartNfaWithStates_0(6, 60, 32);
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 128L);
      case 108:
         if ((active1 & 4096L) != 0L)
            return mccStartNfaWithStates_0(6, 76, 32);
         return mccMoveStringLiteralDfa7_0(active0, -9223372036854775808L, active1, 16384L);
      case 110:
         return mccMoveStringLiteralDfa7_0(active0, 4325376L, active1, 0L);
      case 116:
         if ((active0 & 274877906944L) != 0L)
            return mccStartNfaWithStates_0(6, 38, 32);
         return mccMoveStringLiteralDfa7_0(active0, 2305843009213693952L, active1, 0L);
      case 117:
         return mccMoveStringLiteralDfa7_0(active0, 137438953472L, active1, 0L);
      case 121:
         if ((active0 & 35184372088832L) != 0L)
            return mccStartNfaWithStates_0(6, 45, 32);
         break;
      default :
         break;
   }
   return mccStartNfa_0(5, active0, active1, 0L);
}
private int mccMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return mccStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch((int)curChar) {
      case 40:
         return mccMoveStringLiteralDfa8_0(active0, 4194304L, active1, 0L);
      case 42:
         return mccMoveStringLiteralDfa8_0(active0, 131072L, active1, 0L);
      case 65:
         return mccMoveStringLiteralDfa8_0(active0, 2L, active1, 0L);
      case 66:
         return mccMoveStringLiteralDfa8_0(active0, 8L, active1, 0L);
      case 67:
         return mccMoveStringLiteralDfa8_0(active0, 4L, active1, 0L);
      case 69:
         return mccMoveStringLiteralDfa8_0(active0, 16L, active1, 0L);
      case 71:
         return mccMoveStringLiteralDfa8_0(active0, 1024L, active1, 0L);
      case 95:
         return mccMoveStringLiteralDfa8_0(active0, 128L, active1, 0L);
      case 99:
         return mccMoveStringLiteralDfa8_0(active0, 74309393851613184L, active1, 0L);
      case 101:
         if ((active0 & 137438953472L) != 0L)
            return mccStartNfaWithStates_0(7, 37, 32);
         else if ((active0 & 576460752303423488L) != 0L)
            return mccStartNfaWithStates_0(7, 59, 32);
         else if ((active1 & 16384L) != 0L)
            return mccStartNfaWithStates_0(7, 78, 32);
         return mccMoveStringLiteralDfa8_0(active0, 2305843009213693952L, active1, 0L);
      case 108:
         if ((active0 & 4503599627370496L) != 0L)
            return mccStartNfaWithStates_0(7, 52, 32);
         break;
      case 110:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 128L);
      case 116:
         if ((active0 & 134217728L) != 0L)
            return mccStartNfaWithStates_0(7, 27, 32);
         break;
      case 121:
         if ((active0 & -9223372036854775808L) != 0L)
            return mccStartNfaWithStates_0(7, 63, 32);
         break;
      default :
         break;
   }
   return mccStartNfa_0(6, active0, active1, 0L);
}
private int mccMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return mccStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch((int)curChar) {
      case 47:
         if ((active0 & 131072L) != 0L)
            return mccStopAtPos(8, 17);
         break;
      case 65:
         return mccMoveStringLiteralDfa9_0(active0, 4L, active1, 0L);
      case 68:
         if ((active0 & 2L) != 0L)
            return mccStartNfaWithStates_0(8, 1, 32);
         break;
      case 69:
         return mccMoveStringLiteralDfa9_0(active0, 8L, active1, 0L);
      case 78:
         return mccMoveStringLiteralDfa9_0(active0, 16L, active1, 0L);
      case 82:
         return mccMoveStringLiteralDfa9_0(active0, 1024L, active1, 0L);
      case 84:
         return mccMoveStringLiteralDfa9_0(active0, 128L, active1, 0L);
      case 99:
         return mccMoveStringLiteralDfa9_0(active0, 4194304L, active1, 0L);
      case 100:
         if ((active0 & 2305843009213693952L) != 0L)
            return mccStartNfaWithStates_0(8, 61, 32);
         break;
      case 101:
         if ((active0 & 2251799813685248L) != 0L)
            return mccStartNfaWithStates_0(8, 51, 32);
         else if ((active0 & 72057594037927936L) != 0L)
            return mccStartNfaWithStates_0(8, 56, 32);
         break;
      case 116:
         if ((active1 & 128L) != 0L)
            return mccStartNfaWithStates_0(8, 71, 32);
         break;
      default :
         break;
   }
   return mccStartNfa_0(7, active0, active1, 0L);
}
private int mccMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return mccStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch((int)curChar) {
      case 68:
         if ((active0 & 16L) != 0L)
            return mccStartNfaWithStates_0(9, 4, 32);
         break;
      case 71:
         return mccMoveStringLiteralDfa10_0(active0, 8L);
      case 79:
         return mccMoveStringLiteralDfa10_0(active0, 128L);
      case 83:
         return mccMoveStringLiteralDfa10_0(active0, 4L);
      case 95:
         return mccMoveStringLiteralDfa10_0(active0, 1024L);
      case 115:
         return mccMoveStringLiteralDfa10_0(active0, 4194304L);
      default :
         break;
   }
   return mccStartNfa_0(8, active0, 0L, 0L);
}
private int mccMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return mccStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch((int)curChar) {
      case 68:
         return mccMoveStringLiteralDfa11_0(active0, 1024L);
      case 69:
         if ((active0 & 4L) != 0L)
            return mccStartNfaWithStates_0(10, 2, 32);
         break;
      case 73:
         return mccMoveStringLiteralDfa11_0(active0, 8L);
      case 75:
         return mccMoveStringLiteralDfa11_0(active0, 128L);
      case 84:
         return mccMoveStringLiteralDfa11_0(active0, 4194304L);
      default :
         break;
   }
   return mccStartNfa_0(9, active0, 0L, 0L);
}
private int mccMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return mccStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch((int)curChar) {
      case 69:
         return mccMoveStringLiteralDfa12_0(active0, 1152L);
      case 78:
         if ((active0 & 8L) != 0L)
            return mccStartNfaWithStates_0(11, 3, 32);
         break;
      case 114:
         return mccMoveStringLiteralDfa12_0(active0, 4194304L);
      default :
         break;
   }
   return mccStartNfa_0(10, active0, 0L, 0L);
}
private int mccMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return mccStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch((int)curChar) {
      case 67:
         return mccMoveStringLiteralDfa13_0(active0, 1024L);
      case 78:
         if ((active0 & 128L) != 0L)
            return mccStartNfaWithStates_0(12, 7, 32);
         break;
      case 101:
         return mccMoveStringLiteralDfa13_0(active0, 4194304L);
      default :
         break;
   }
   return mccStartNfa_0(11, active0, 0L, 0L);
}
private int mccMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return mccStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch((int)curChar) {
      case 76:
         return mccMoveStringLiteralDfa14_0(active0, 1024L);
      case 101:
         if ((active0 & 4194304L) != 0L)
            return mccStopAtPos(13, 22);
         break;
      default :
         break;
   }
   return mccStartNfa_0(12, active0, 0L, 0L);
}
private int mccMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return mccStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch((int)curChar) {
      case 83:
         if ((active0 & 1024L) != 0L)
            return mccStartNfaWithStates_0(14, 10, 32);
         break;
      default :
         break;
   }
   return mccStartNfa_0(13, active0, 0L, 0L);
}
private void mccCheckNAdd(int state)
{
   if (mccrounds[state] != mccround)
   {
      mccstateSet[mccnewStateCnt++] = state;
      mccrounds[state] = mccround;
   }
}
private void mccAddStates(int start, int end)
{
   do {
      mccstateSet[mccnewStateCnt++] = mccnextStates[start];
   } while (start++ != end);
}
private void mccCheckNAddTwoStates(int state1, int state2)
{
   mccCheckNAdd(state1);
   mccCheckNAdd(state2);
}
private void mccCheckNAddStates(int start, int end)
{
   do {
      mccCheckNAdd(mccnextStates[start]);
   } while (start++ != end);
}
private void mccCheckNAddStates(int start)
{
   mccCheckNAdd(mccnextStates[start]);
   mccCheckNAdd(mccnextStates[start + 1]);
}
static readonly long[] mccbitVec0 = {
   0L, 0L, -1L, -1L
};
static readonly long[] mccbitVec1 = {
   -4503599625273342, -8193L, -17525614051329L, 1297036692691091455L
};
static readonly long[] mccbitVec2 = {
   -1L, -1L, -1L, -1L
};
static readonly long[] mccbitVec3 = {
   0L, 0L, 297242231151001600L, -36028797027352577L
};
static readonly long[] mccbitVec4 = {
   4503586742468607L, -65536L, -432556670460100609L, 70501888360451L
};
static readonly long[] mccbitVec5 = {
   0L, 288230376151711744L, -17179879616L, 4503599577006079L
};
static readonly long[] mccbitVec6 = {
   -1L, -1L, -4093L, 234187180623206815L
};
static readonly long[] mccbitVec7 = {
   -562949953421312L, -8547991553L, 255L, 1979120929931264L
};
static readonly long[] mccbitVec8 = {
   576460743713488896L, -562949953419265L, -1L, 2017613045381988351L
};
static readonly long[] mccbitVec9 = {
   35184371892224L, 0L, 274877906943L, 0L
};
static readonly long[] mccbitVec10 = {
   2594073385365405664L, 17163157504L, 271902628478820320L, 4222140488351744L
};
static readonly long[] mccbitVec11 = {
   247132830528276448L, 7881300924956672L, 2589004636761075680L, 4295032832L
};
static readonly long[] mccbitVec12 = {
   2579997437506199520L, 15837691904L, 270153412153034720L, 0L
};
static readonly long[] mccbitVec13 = {
   283724577500946400L, 12884901888L, 283724577500946400L, 13958643712L
};
static readonly long[] mccbitVec14 = {
   288228177128316896L, 12884901888L, 3457638613854978016L, 127L
};
static readonly long[] mccbitVec15 = {
   -9219431387180826626L, 127L, 2309762420256548246L, 805306463L
};
static readonly long[] mccbitVec16 = {
   1L, 8796093021951L, 3840L, 0L
};
static readonly long[] mccbitVec17 = {
   7679401525247L, 4128768L, -4294967296L, 36028797018898495L
};
static readonly long[] mccbitVec18 = {
   -1L, -2080374785L, -1065151889409L, 288230376151711743L
};
static readonly long[] mccbitVec19 = {
   -129L, -3263218305L, 9168625153884503423L, -140737496776899L
};
static readonly long[] mccbitVec20 = {
   -2160230401L, 134217599L, -4294967296L, 9007199254740991L
};
static readonly long[] mccbitVec21 = {
   -2L, -1L, -1L, -1L
};
static readonly long[] mccbitVec22 = {
   -1L, 35923243902697471L, -4160749570L, 8796093022207L
};
static readonly long[] mccbitVec23 = {
   0L, 0L, 4503599627370495L, 134217728L
};
static readonly long[] mccbitVec24 = {
   -4294967296L, 72057594037927935L, 2199023255551L, 0L
};
static readonly long[] mccbitVec25 = {
   -1L, -1L, -4026531841L, 288230376151711743L
};
static readonly long[] mccbitVec26 = {
   -3233808385L, 4611686017001275199L, 6908521828386340863L, 2295745090394464220L
};
static readonly long[] mccbitVec27 = {
   -9223372036854775808L, -9223372036854775807L, 281470681743360L, 0L
};
static readonly long[] mccbitVec28 = {
   287031153606524036L, -4294967296L, 15L, 0L
};
static readonly long[] mccbitVec29 = {
   521858996278132960L, -2L, -6977224705L, 9223372036854775807L
};
static readonly long[] mccbitVec30 = {
   -527765581332512L, -1L, 72057589742993407L, 0L
};
static readonly long[] mccbitVec31 = {
   -1L, -1L, 18014398509481983L, 0L
};
static readonly long[] mccbitVec32 = {
   -1L, -1L, 274877906943L, 0L
};
static readonly long[] mccbitVec33 = {
   -1L, -1L, 8191L, 0L
};
static readonly long[] mccbitVec34 = {
   -1L, -1L, 68719476735L, 0L
};
static readonly long[] mccbitVec35 = {
   70368744177663L, 0L, 0L, 0L
};
static readonly long[] mccbitVec36 = {
   6881498030004502655L, -37L, 1125899906842623L, -524288L
};
static readonly long[] mccbitVec37 = {
   4611686018427387903L, -65536L, -196609L, 1152640029630136575L
};
static readonly long[] mccbitVec38 = {
   6755399441055744L, -11538275021824000L, -1L, 2305843009213693951L
};
static readonly long[] mccbitVec39 = {
   -8646911293141286896L, -137304735746L, 9223372036854775807L, 425688104188L
};
static readonly long[] mccbitVec40 = {
   0L, 0L, 297242235445968895L, -36028797027352577L
};
static readonly long[] mccbitVec41 = {
   -1L, 288230406216515583L, -17179879616L, 4503599577006079L
};
static readonly long[] mccbitVec42 = {
   -1L, -1L, -3973L, 234187180623206815L
};
static readonly long[] mccbitVec43 = {
   -562949953421312L, -8547991553L, -4899916411759099649L, 1979120929931286L
};
static readonly long[] mccbitVec44 = {
   576460743713488896L, -277081220972545L, -1L, 2305629702346244095L
};
static readonly long[] mccbitVec45 = {
   -246290604654592L, 2047L, 562949953421311L, 0L
};
static readonly long[] mccbitVec46 = {
   -864691128455135250L, 281268803551231L, -3186861885341720594L, 4503392135166367L
};
static readonly long[] mccbitVec47 = {
   -3211631683292264476L, 9006925953907079L, -869759877059465234L, 281204393851839L
};
static readonly long[] mccbitVec48 = {
   -878767076314341394L, 281215949093263L, -4341532606274353172L, 280925229301191L
};
static readonly long[] mccbitVec49 = {
   -4327961440926441490L, 281212990012895L, -4327961440926441492L, 281214063754719L
};
static readonly long[] mccbitVec50 = {
   -4323457841299070996L, 281212992110031L, 3457638613854978028L, 3377704004977791L
};
static readonly long[] mccbitVec51 = {
   -8646911284551352322L, 67076095L, 4323434403644581270L, 872365919L
};
static readonly long[] mccbitVec52 = {
   -4422530440275951615L, -554153860399361L, 2305843009196855263L, 64L
};
static readonly long[] mccbitVec53 = {
   272457864671395839L, 67044351L, -4294967296L, 36028797018898495L
};
static readonly long[] mccbitVec54 = {
   -2160230401L, 1123701017804671L, -4294967296L, 9007199254740991L
};
static readonly long[] mccbitVec55 = {
   0L, 0L, -1L, 4393886810111L
};
static readonly long[] mccbitVec56 = {
   -4227893248L, 72057594037927935L, 4398046511103L, 0L
};
static readonly long[] mccbitVec57 = {
   -9223235697412870144L, -9223094959924576255L, 281470681743360L, 9126739968L
};
static readonly long[] mccbitVec58 = {
   522136073208332512L, -2L, -6876561409L, 9223372036854775807L
};
static readonly long[] mccbitVec59 = {
   6881498031078244479L, -37L, 1125899906842623L, -524288L
};
static readonly long[] mccbitVec60 = {
   6755463865565184L, -11538275021824000L, -1L, -6917529027641081857L
};
static readonly long[] mccbitVec61 = {
   -8646911293074243568L, -137304735746L, 9223372036854775807L, 1008806742219095292L
};
private int mccMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 65;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 3:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(0, 6);
                  else if (curChar == 36)
                  {
                     if (kind > 139)
                        kind = 139;
                     mccCheckNAdd(32);
                  }
                  else if (curChar == 34)
                     mccCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     mccAddStates(10, 11);
                  else if (curChar == 46)
                     mccCheckNAdd(8);
                  else if (curChar == 47)
                     mccstateSet[mccnewStateCnt++] = 2;
                  if ((287667426198290432 & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     mccCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 80)
                        kind = 80;
                     mccCheckNAddStates(12, 16);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     mccstateSet[mccnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((-140737488355329 & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 2:
                  if (curChar == 42)
                     mccstateSet[mccnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((287667426198290432 & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  mccCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  mccCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 46)
                     mccCheckNAdd(8);
                  break;
               case 8:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  mccCheckNAddStates(17, 19);
                  break;
               case 10:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(11);
                  break;
               case 11:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  mccCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if (curChar == 39)
                     mccAddStates(10, 11);
                  break;
               case 14:
                  if ((-549755823105 & l) != 0L)
                     mccCheckNAdd(15);
                  break;
               case 15:
                  if (curChar == 39 && kind > 89)
                     kind = 89;
                  break;
               case 17:
                  if ((566935683072 & l) != 0L)
                     mccCheckNAdd(15);
                  break;
               case 18:
                  if ((71776119061217280 & l) != 0L)
                     mccCheckNAddTwoStates(19, 15);
                  break;
               case 19:
                  if ((71776119061217280 & l) != 0L)
                     mccCheckNAdd(15);
                  break;
               case 20:
                  if ((4222124650659840 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((71776119061217280 & l) != 0L)
                     mccCheckNAdd(19);
                  break;
               case 22:
                  if (curChar == 34)
                     mccCheckNAddStates(7, 9);
                  break;
               case 23:
                  if ((-17179878401 & l) != 0L)
                     mccCheckNAddStates(7, 9);
                  break;
               case 25:
                  if ((566935683072 & l) != 0L)
                     mccCheckNAddStates(7, 9);
                  break;
               case 26:
                  if (curChar == 34 && kind > 90)
                     kind = 90;
                  break;
               case 27:
                  if ((71776119061217280 & l) != 0L)
                     mccCheckNAddStates(20, 23);
                  break;
               case 28:
                  if ((71776119061217280 & l) != 0L)
                     mccCheckNAddStates(7, 9);
                  break;
               case 29:
                  if ((4222124650659840 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((71776119061217280 & l) != 0L)
                     mccCheckNAdd(28);
                  break;
               case 31:
                  if (curChar != 36)
                     break;
                  if (kind > 139)
                     kind = 139;
                  mccCheckNAdd(32);
                  break;
               case 32:
                  if ((287948970162897407 & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  mccCheckNAdd(32);
                  break;
               case 33:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(0, 6);
                  break;
               case 34:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(24, 26);
                  break;
               case 36:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(37);
                  break;
               case 37:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(37, 12);
                  break;
               case 38:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(41);
                  break;
               case 41:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  mccCheckNAddTwoStates(41, 12);
                  break;
               case 42:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar != 46)
                     break;
                  if (kind > 84)
                     kind = 84;
                  mccCheckNAddStates(27, 29);
                  break;
               case 44:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  mccCheckNAddStates(27, 29);
                  break;
               case 46:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(47);
                  break;
               case 47:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  mccCheckNAddTwoStates(47, 12);
                  break;
               case 48:
                  if (curChar != 48)
                     break;
                  if (kind > 80)
                     kind = 80;
                  mccCheckNAddStates(12, 16);
                  break;
               case 50:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  mccCheckNAddTwoStates(50, 6);
                  break;
               case 51:
                  if ((71776119061217280 & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  mccCheckNAddTwoStates(51, 6);
                  break;
               case 53:
                  if ((287948901175001088 & l) != 0L)
                     mccAddStates(30, 31);
                  break;
               case 54:
                  if (curChar == 46)
                     mccCheckNAdd(55);
                  break;
               case 55:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(55, 56);
                  break;
               case 57:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(58);
                  break;
               case 58:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  mccCheckNAddTwoStates(58, 12);
                  break;
               case 60:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(32, 34);
                  break;
               case 61:
                  if (curChar == 46)
                     mccCheckNAdd(62);
                  break;
               case 63:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(64);
                  break;
               case 64:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  mccCheckNAddTwoStates(64, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 3:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  mccCheckNAdd(32);
                  break;
               case 1:
                  if (kind > 20)
                     kind = 20;
                  break;
               case 6:
                  if ((17592186048512 & l) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 9:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(35, 36);
                  break;
               case 12:
                  if ((343597383760 & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 14:
                  if ((-268435457 & l) != 0L)
                     mccCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 92)
                     mccAddStates(37, 39);
                  break;
               case 17:
                  if ((5700160604602368 & l) != 0L)
                     mccCheckNAdd(15);
                  break;
               case 23:
                  if ((-268435457 & l) != 0L)
                     mccCheckNAddStates(7, 9);
                  break;
               case 24:
                  if (curChar == 92)
                     mccAddStates(40, 42);
                  break;
               case 25:
                  if ((5700160604602368 & l) != 0L)
                     mccCheckNAddStates(7, 9);
                  break;
               case 32:
                  if ((-8646911290859585538 & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  mccCheckNAdd(32);
                  break;
               case 35:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(43, 44);
                  break;
               case 39:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(45, 46);
                  break;
               case 45:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(47, 48);
                  break;
               case 49:
                  if ((72057594054705152 & l) != 0L)
                     mccCheckNAdd(50);
                  break;
               case 50:
                  if ((541165879422 & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  mccCheckNAddTwoStates(50, 6);
                  break;
               case 52:
                  if ((72057594054705152 & l) != 0L)
                     mccCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((541165879422 & l) != 0L)
                     mccCheckNAddTwoStates(53, 54);
                  break;
               case 55:
                  if ((541165879422 & l) != 0L)
                     mccAddStates(49, 50);
                  break;
               case 56:
                  if ((281474976776192 & l) != 0L)
                     mccAddStates(51, 52);
                  break;
               case 59:
                  if ((72057594054705152 & l) != 0L)
                     mccCheckNAdd(60);
                  break;
               case 60:
                  if ((541165879422 & l) != 0L)
                     mccCheckNAddStates(32, 34);
                  break;
               case 62:
                  if ((281474976776192 & l) != 0L)
                     mccAddStates(53, 54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 63);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 3:
                  if (!mccCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 139)
                     kind = 139;
                  mccCheckNAdd(32);
                  break;
               case 1:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               case 14:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccstateSet[mccnewStateCnt++] = 15;
                  break;
               case 23:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccAddStates(7, 9);
                  break;
               case 32:
                  if (!mccCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 139)
                     kind = 139;
                  mccCheckNAdd(32);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 65 - (mccnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
private int mccMoveStringLiteralDfa0_4()
{
   switch((int)curChar) {
      case 42:
         return mccMoveStringLiteralDfa1_4(33554432L);
      default :
         return 1;
   }
}
private int mccMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      return 1;
   }
   switch((int)curChar) {
      case 47:
         if ((active0 & 33554432L) != 0L)
            return mccStopAtPos(1, 25);
         break;
      default :
         return 2;
   }
   return 2;
}
private int mccMoveStringLiteralDfa0_2()
{
   return mccMoveNfa_2(0, 0);
}
private int mccMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 3;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
                  if ((9216 & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if (curChar == 13)
                     mccstateSet[mccnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 23)
                     kind = 23;
                  break;
               case 2:
                  if (curChar == 13)
                     mccstateSet[mccnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 63);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 3 - (mccnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
private int mccMoveStringLiteralDfa0_1()
{
   return 1;
}
private int mccMoveStringLiteralDfa0_3()
{
   switch((int)curChar) {
      case 42:
         return mccMoveStringLiteralDfa1_3(16777216L);
      default :
         return 1;
   }
}
private int mccMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      return 1;
   }
   switch((int)curChar) {
      case 47:
         if ((active0 & 16777216L) != 0L)
            return mccStopAtPos(1, 24);
         break;
      default :
         return 2;
   }
   return 2;
}
static readonly int[] mccnextStates = {
   34, 35, 12, 38, 39, 42, 43, 23, 24, 26, 14, 16, 49, 51, 6, 52, 
   59, 8, 9, 12, 23, 24, 28, 26, 34, 35, 12, 44, 45, 12, 53, 54, 
   60, 61, 62, 10, 11, 17, 18, 20, 25, 27, 29, 36, 37, 40, 41, 46, 
   47, 55, 56, 57, 58, 63, 64, 
};
private static bool mccCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((mccbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static bool mccCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((mccbitVec3[i2] & l2) != 0L);
      case 2:
         return ((mccbitVec4[i2] & l2) != 0L);
      case 3:
         return ((mccbitVec5[i2] & l2) != 0L);
      case 4:
         return ((mccbitVec6[i2] & l2) != 0L);
      case 5:
         return ((mccbitVec7[i2] & l2) != 0L);
      case 6:
         return ((mccbitVec8[i2] & l2) != 0L);
      case 7:
         return ((mccbitVec9[i2] & l2) != 0L);
      case 9:
         return ((mccbitVec10[i2] & l2) != 0L);
      case 10:
         return ((mccbitVec11[i2] & l2) != 0L);
      case 11:
         return ((mccbitVec12[i2] & l2) != 0L);
      case 12:
         return ((mccbitVec13[i2] & l2) != 0L);
      case 13:
         return ((mccbitVec14[i2] & l2) != 0L);
      case 14:
         return ((mccbitVec15[i2] & l2) != 0L);
      case 15:
         return ((mccbitVec16[i2] & l2) != 0L);
      case 16:
         return ((mccbitVec17[i2] & l2) != 0L);
      case 17:
         return ((mccbitVec18[i2] & l2) != 0L);
      case 18:
         return ((mccbitVec19[i2] & l2) != 0L);
      case 19:
         return ((mccbitVec20[i2] & l2) != 0L);
      case 20:
         return ((mccbitVec21[i2] & l2) != 0L);
      case 22:
         return ((mccbitVec22[i2] & l2) != 0L);
      case 23:
         return ((mccbitVec23[i2] & l2) != 0L);
      case 24:
         return ((mccbitVec24[i2] & l2) != 0L);
      case 30:
         return ((mccbitVec25[i2] & l2) != 0L);
      case 31:
         return ((mccbitVec26[i2] & l2) != 0L);
      case 32:
         return ((mccbitVec27[i2] & l2) != 0L);
      case 33:
         return ((mccbitVec28[i2] & l2) != 0L);
      case 48:
         return ((mccbitVec29[i2] & l2) != 0L);
      case 49:
         return ((mccbitVec30[i2] & l2) != 0L);
      case 77:
         return ((mccbitVec31[i2] & l2) != 0L);
      case 159:
         return ((mccbitVec32[i2] & l2) != 0L);
      case 164:
         return ((mccbitVec33[i2] & l2) != 0L);
      case 215:
         return ((mccbitVec34[i2] & l2) != 0L);
      case 250:
         return ((mccbitVec35[i2] & l2) != 0L);
      case 251:
         return ((mccbitVec36[i2] & l2) != 0L);
      case 253:
         return ((mccbitVec37[i2] & l2) != 0L);
      case 254:
         return ((mccbitVec38[i2] & l2) != 0L);
      case 255:
         return ((mccbitVec39[i2] & l2) != 0L);
      default : 
         if ((mccbitVec1[i1] & l1) != 0L)
            if ((mccbitVec2[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static bool mccCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((mccbitVec40[i2] & l2) != 0L);
      case 2:
         return ((mccbitVec4[i2] & l2) != 0L);
      case 3:
         return ((mccbitVec41[i2] & l2) != 0L);
      case 4:
         return ((mccbitVec42[i2] & l2) != 0L);
      case 5:
         return ((mccbitVec43[i2] & l2) != 0L);
      case 6:
         return ((mccbitVec44[i2] & l2) != 0L);
      case 7:
         return ((mccbitVec45[i2] & l2) != 0L);
      case 9:
         return ((mccbitVec46[i2] & l2) != 0L);
      case 10:
         return ((mccbitVec47[i2] & l2) != 0L);
      case 11:
         return ((mccbitVec48[i2] & l2) != 0L);
      case 12:
         return ((mccbitVec49[i2] & l2) != 0L);
      case 13:
         return ((mccbitVec50[i2] & l2) != 0L);
      case 14:
         return ((mccbitVec51[i2] & l2) != 0L);
      case 15:
         return ((mccbitVec52[i2] & l2) != 0L);
      case 16:
         return ((mccbitVec53[i2] & l2) != 0L);
      case 17:
         return ((mccbitVec18[i2] & l2) != 0L);
      case 18:
         return ((mccbitVec19[i2] & l2) != 0L);
      case 19:
         return ((mccbitVec54[i2] & l2) != 0L);
      case 20:
         return ((mccbitVec21[i2] & l2) != 0L);
      case 22:
         return ((mccbitVec22[i2] & l2) != 0L);
      case 23:
         return ((mccbitVec55[i2] & l2) != 0L);
      case 24:
         return ((mccbitVec56[i2] & l2) != 0L);
      case 30:
         return ((mccbitVec25[i2] & l2) != 0L);
      case 31:
         return ((mccbitVec26[i2] & l2) != 0L);
      case 32:
         return ((mccbitVec57[i2] & l2) != 0L);
      case 33:
         return ((mccbitVec28[i2] & l2) != 0L);
      case 48:
         return ((mccbitVec58[i2] & l2) != 0L);
      case 49:
         return ((mccbitVec30[i2] & l2) != 0L);
      case 77:
         return ((mccbitVec31[i2] & l2) != 0L);
      case 159:
         return ((mccbitVec32[i2] & l2) != 0L);
      case 164:
         return ((mccbitVec33[i2] & l2) != 0L);
      case 215:
         return ((mccbitVec34[i2] & l2) != 0L);
      case 250:
         return ((mccbitVec35[i2] & l2) != 0L);
      case 251:
         return ((mccbitVec59[i2] & l2) != 0L);
      case 253:
         return ((mccbitVec37[i2] & l2) != 0L);
      case 254:
         return ((mccbitVec60[i2] & l2) != 0L);
      case 255:
         return ((mccbitVec61[i2] & l2) != 0L);
      default : 
         if ((mccbitVec1[i1] & l1) != 0L)
            if ((mccbitVec2[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
public static readonly string[] mccstrLiteralImages = {
"", "LOOKAHEAD", "IGNORE_CASE", "PARSER_BEGIN", "PARSER_END", "CODE", "TOKEN", 
"SPECIAL_TOKEN", "MORE", "SKIP", "TOKEN_MGR_DECLS", "EOF", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "abstract", "base", "bool", 
"break", "byte", "case", "catch", "char", "class", "const", "continue", "default", 
"do", "double", "else", "enum", "extern", "false", "finally", "float", "for", 
"goto", "if", "int", "interface", "internal", "is", "lock", "long", "namespace", 
"new", "null", "override", "private", "protected", "public", "readonly", "return", 
"sealed", "short", "static", "switch", "this", "throw", "transient", "true", "try", 
"using", "var", "virtual", "void", "volatile", "while", null, null, null, null, null, 
null, null, null, null, null, null, "(", ")", "{", "}", "[", "]", ";", ",", ".", 
"=", "<", "!", "~", "?", ":", "==", "<=", ">=", "!=", "||", "&&", "++", "--", "+", 
"-", "*", "/", "&", "|", "^", "%", "+=", "-=", "*=", "/=", "&=", "|=", "^=", "%=", 
">>", ">", "#", "out", "in", "params", "<<=", ">>=", "<<", null, null, null, };
public static readonly string[] lexStateNames = {
   "DEFAULT", 
   "AFTER_EGEN", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static readonly int[] mccnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, 2, 3, 4, 4, 0, 0, 
   0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static readonly long[] mcctoToken = {
   -134213633, -32374785, 4095, 
};
static readonly long[] mcctoSkip = {
   59240448, 0, 0, 
};
static readonly long[] mcctoSpecial = {
   58720256, 0, 0, 
};
static readonly long[] mcctoMore = {
   74973184, 0, 0, 
};
protected CSharpCharStream input_stream;
private readonly int[] mccrounds = new int[65];
private readonly int[] mccstateSet = new int[130];
System.Text.StringBuilder image;
int mccimageLen;
int lengthOfMatch;
protected char curChar;
public CSharpCCParserTokenManager(CSharpCharStream stream) {
   if (CSharpCharStream.staticFlag)
      throw new System.SystemException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public CSharpCCParserTokenManager(CSharpCharStream stream, int lexState)
   : this(stream) {
   SwitchTo(lexState);
}
public void ReInit(CSharpCharStream stream) {
   mccmatchedPos = mccnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   mccround = -2147483647;
   for (i = 65; i-- > 0;)
      mccrounds[i] = Int32.MinValue;
}
public void ReInit(CSharpCharStream stream, int lexState) {
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState) {
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.InvalidLexicalState);
   else
      curLexState = lexState;
}

protected Token mccFillToken()
{
   Token t = Token.NewToken(mccmatchedKind);
   t.kind = mccmatchedKind;
   string im = mccstrLiteralImages[mccmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.BeginLine;
   t.beginColumn = input_stream.BeginColumn;
   t.endLine = input_stream.EndLine;
   t.endColumn = input_stream.EndColumn;
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int mccnewStateCnt;
int mccround;
int mccmatchedPos;
int mccmatchedKind;

public Token GetNextToken() {
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

for (;;) {
   try {
      curChar = input_stream.BeginToken();
   } catch(System.IO.IOException) {
      mccmatchedKind = 0;
      matchedToken = mccFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   mccimageLen = 0;

   for (;;) {
     switch(curLexState) {
       case 0:
         try { input_stream.Backup(0);
            while (curChar <= ' ' && (4294981120L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         } catch (System.IO.IOException) { goto EOFLoop; }
         mccmatchedKind = Int32.MaxValue;
         mccmatchedPos = 0;
         curPos = mccMoveStringLiteralDfa0_0();
         break;
       case 1:
         mccmatchedKind = Int32.MaxValue;
         mccmatchedPos = 0;
         curPos = mccMoveStringLiteralDfa0_1();
         if (mccmatchedPos == 0 && mccmatchedKind > 18)
         {
            mccmatchedKind = 18;
         }
         break;
       case 2:
         mccmatchedKind = Int32.MaxValue;
         mccmatchedPos = 0;
         curPos = mccMoveStringLiteralDfa0_2();
         if (mccmatchedPos == 0 && mccmatchedKind > 26)
         {
            mccmatchedKind = 26;
         }
         break;
       case 3:
         mccmatchedKind = Int32.MaxValue;
         mccmatchedPos = 0;
         curPos = mccMoveStringLiteralDfa0_3();
         if (mccmatchedPos == 0 && mccmatchedKind > 26)
         {
            mccmatchedKind = 26;
         }
         break;
       case 4:
         mccmatchedKind = Int32.MaxValue;
         mccmatchedPos = 0;
         curPos = mccMoveStringLiteralDfa0_4();
         if (mccmatchedPos == 0 && mccmatchedKind > 26)
         {
            mccmatchedKind = 26;
         }
         break;
     }
     if (mccmatchedKind != Int32.MaxValue) {
        if (mccmatchedPos + 1 < curPos)
           input_stream.Backup(curPos - mccmatchedPos - 1);
        if ((mcctoToken[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L) {
           matchedToken = mccFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (mccnewLexState[mccmatchedKind] != -1)
         curLexState = mccnewLexState[mccmatchedKind];
           return matchedToken;
        }
        else if ((mcctoSkip[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L)
        {
           if ((mcctoSpecial[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L) {
              matchedToken = mccFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (mccnewLexState[mccmatchedKind] != -1)
           curLexState = mccnewLexState[mccmatchedKind];
           goto EOFLoop;
        }
        MoreLexicalActions();
      if (mccnewLexState[mccmatchedKind] != -1)
        curLexState = mccnewLexState[mccmatchedKind];
        curPos = 0;
        mccmatchedKind = Int32.MaxValue;
        try {
           curChar = input_stream.ReadChar();
           continue;
        } catch (System.IO.IOException) { }
     }
     int error_line = input_stream.EndLine;
     int error_column = input_stream.EndColumn;
     string error_after = null;
     bool EOFSeen = false;
     try { input_stream.ReadChar(); input_stream.Backup(1); }
     catch (System.IO.IOException) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        } else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.Backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LexicalError);
   }
EOFLoop: ;
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(mccmatchedKind) {
      case 18 :
         if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1)));
          RestoreBeginLineCol(); input_stream.Backup(1);
         break;
      default :
         break;
   }
}
void MoreLexicalActions() {
   mccimageLen += (lengthOfMatch = mccmatchedPos + 1);
   switch(mccmatchedKind) {
      case 20 :
         if (image == null)
              image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen)));
         else
            image.Append(input_stream.GetSuffix(mccimageLen));
         mccimageLen = 0;
                   input_stream.Backup(1);
         break;
      case 22 :
         if (image == null)
              image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen)));
         else
            image.Append(input_stream.GetSuffix(mccimageLen));
         mccimageLen = 0;
        SaveBeginLineCol(input_stream.BeginLine,
                         input_stream.BeginColumn);
         break;
      default : 
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(mccmatchedKind) {
      case 130 :
        if (image == null)
            image = new System.Text.StringBuilder(mccstrLiteralImages[130]);
         else
            image.Append(mccstrLiteralImages[130]);
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = CSharpCCParserConstants.RSIGNEDSHIFT;
     input_stream.Backup(1);
     matchedToken.image = ">";
         break;
      default : 
         break;
   }
}
}
}
