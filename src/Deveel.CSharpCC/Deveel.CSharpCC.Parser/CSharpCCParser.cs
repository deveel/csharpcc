/* Generated By:CSharpCC: Do not edit this line. CSharpCCParser.cs */
namespace Deveel.CSharpCC.Parser {


using System;
using System.Collections;
using System.Collections.Generic;

public class CSharpCCParser : CSharpCCParserConstants {

  string parserTypeName;
  bool processingTypeUnit = false;
  int typeNesting = 0;

  int inLocalLA = 0;
  bool inAction = false;
  bool jumpPatched = false;

  private bool NotTailOfExpansionUnit() {
    Token t;
    t = GetToken(1);
    if (t.kind == BIT_OR ||
                t.kind == COMMA ||
                t.kind == RPAREN ||
                t.kind == RBRACE ||
                t.kind == RBRACKET)
                return false;
    return true;
  }

   public class ModifierSet
   {
     /* Definitions of the bits in the modifiers field.  */
     public const int PUBLIC = 0x0001;
     public const int PROTECTED = 0x0002;
     public const int PRIVATE = 0x0004;
     public const int ABSTRACT = 0x0008;
     public const int STATIC = 0x0010;
     public const int READONLY = 0x0020;
         public const int INTERNAL = 0x0040;
     public const int EXTERN = 0x0080;
     public const int TRANSIENT = 0x0100;
     public const int VOLATILE = 0x0200;

     public bool isPublic(int modifiers)
     {
       return (modifiers & PUBLIC) != 0;
     }

     public bool isProtected(int modifiers)
     {
       return (modifiers & PROTECTED) != 0;
     }

     public bool isPrivate(int modifiers)
     {
       return (modifiers & PRIVATE) != 0;
     }

         public bool isInternal(int modifier) {
                 return (modifier & INTERNAL) != 0;
         }

     public bool isStatic(int modifiers)
     {
       return (modifiers & STATIC) != 0;
     }

     public bool isAbstract(int modifiers)
     {
       return (modifiers & ABSTRACT) != 0;
     }

     public bool isReadOnly(int modifiers)
     {
       return (modifiers & READONLY) != 0;
     }

     public bool isExtern(int modifiers)
     {
       return (modifiers & EXTERN) != 0;
     }

     public bool isTransient(int modifiers)
      {
       return (modifiers & TRANSIENT) != 0;
     }

     public bool isVolatile(int modifiers)
     {
       return (modifiers & VOLATILE) != 0;
     }

     static int removeModifier(int modifiers, int mod)
     {
        return modifiers & ~mod;
     }
   }

/************************************************
 * THE CSHARPCC GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
  public void csharpcc_input() {
          String id1, id2;
          CSharpCCParserInternals.initialize();
    csharpcc_options();
    mcc_consume_token(_PARSER_BEGIN);
    mcc_consume_token(LPAREN);
    id1 = identifier();
          CSharpCCParserInternals.addcuname(id1);
    mcc_consume_token(RPAREN);
          processingTypeUnit = true;
          parserTypeName = id1;
    CompilationUnit();
          processingTypeUnit = false;
    mcc_consume_token(_PARSER_END);
    mcc_consume_token(LPAREN);
    id2 = identifier();
          CSharpCCParserInternals.compare(GetToken(0), id1, id2);
    mcc_consume_token(RPAREN);
    while (true) {
      production();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case _CODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case BOOL:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTERNAL:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case VOID:
      case LANGLE:
      case IDENTIFIER:
        ;
        break;
      default:
        mcc_la1[0] = mcc_gen;
        goto label_1;
      }
    }label_1: ;
    
    mcc_consume_token(0);
  }

  public void csharpcc_options() {
    if (GetToken(1).image.Equals("options")) {
      mcc_consume_token(IDENTIFIER);
      mcc_consume_token(LBRACE);
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case STATIC:
        case IDENTIFIER:
          ;
          break;
        default:
          mcc_la1[1] = mcc_gen;
          goto label_2;
        }
        option_binding();
      }label_2: ;
      
      mcc_consume_token(RBRACE);
    } else {
      ;
    }
          Options.Normalize();
  }

  public void option_binding() {
          String option_name;
          int int_val;
          bool bool_val;
          String string_val;
          Token t = GetToken(1);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case IDENTIFIER:
      mcc_consume_token(IDENTIFIER);
      break;
    case _LOOKAHEAD:
      mcc_consume_token(_LOOKAHEAD);
      break;
    case _IGNORE_CASE:
      mcc_consume_token(_IGNORE_CASE);
      break;
    case STATIC:
      mcc_consume_token(STATIC);
      break;
    default:
      mcc_la1[2] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
          option_name = t.image;
    mcc_consume_token(ASSIGN);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INTEGER_LITERAL:
      int_val = IntegerLiteral();
          Options.SetInputFileOption(t, GetToken(0), option_name, int_val);
      break;
    case FALSE:
    case TRUE:
      bool_val = BooleanLiteral();
          Options.SetInputFileOption(t, GetToken(0), option_name, bool_val);
      break;
    case STRING_LITERAL:
      string_val = StringLiteral();
          Options.SetInputFileOption(t, GetToken(0), option_name, string_val);
      break;
    default:
      mcc_la1[3] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    mcc_consume_token(SEMICOLON);
  }

  public void production() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case _CODE:
      cscode_production();
      break;
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case LANGLE:
      regular_expr_production();
      break;
    case _TOKEN_MGR_DECLS:
      token_manager_decls();
      break;
    case BOOL:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTERNAL:
    case LONG:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case VOID:
    case IDENTIFIER:
      bnf_production();
      break;
    default:
      mcc_la1[4] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void cscode_production() {
          CodeProduction p = new CodeProduction();
          String lhs;
          Token t = GetToken(1);
          p.FirstToken = t;
          p.Line = t.beginLine;
          p.Column = t.beginColumn;
    mcc_consume_token(_CODE);
    AccessModifier(p);
    ResultType(p.ReturnTypeTokens);
    lhs = identifier();
                          p.Lhs = lhs;
    FormalParameters(p.ParameterTokens);
    Block(p.CodeTokens);
          p.LastToken = GetToken(0);
          CSharpCCParserInternals.addproduction(p);
  }

  public void bnf_production() {
          BnfProduction p = new BnfProduction();
          Container c = new Container();
          Token t = GetToken(1);
          p.FirstToken = t;
          String lhs;
          p.Line =t.beginLine;
          p.Column =t.beginColumn;
          jumpPatched = false;
    AccessModifier(p);
    ResultType(p.ReturnTypeTokens);
    lhs = identifier();
                      p.Lhs = lhs;
    FormalParameters(p.ParameterTokens);
    mcc_consume_token(COLON);
    Block(p.DeclarationTokens);
    mcc_consume_token(LBRACE);
    expansion_choices(c);
    t = mcc_consume_token(RBRACE);
          p.LastToken = t;
          p.IsJumpPatched = jumpPatched;
          CSharpCCParserInternals.production_addexpansion(p, (Expansion)(c.member));
          CSharpCCParserInternals.addproduction(p);
  }

  public void AccessModifier(NormalProduction p) {
          Token t = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INTERNAL:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PUBLIC:
        t = mcc_consume_token(PUBLIC);
        break;
      case PROTECTED:
        t = mcc_consume_token(PROTECTED);
        break;
      case PRIVATE:
        t = mcc_consume_token(PRIVATE);
        break;
      case INTERNAL:
        t = mcc_consume_token(INTERNAL);
        break;
      default:
        mcc_la1[5] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[6] = mcc_gen;
      ;
      break;
    }
          if(t != null){
            p.AccessModifier = t.image;
          }
  }

  public void regular_expr_production() {
          TokenProduction p = new TokenProduction();
          List<String> states;
          Token t = p.FirstToken = GetToken(1);
          p.Line = t.beginLine;
          p.Column = t.beginColumn;
          // set p.lexStates assuming there is no state spec.
          // and then override if necessary.
          p.LexStates = new String[] {"DEFAULT"};
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LANGLE:
      if (mcc_2_1(2)) {
        mcc_consume_token(LANGLE);
        mcc_consume_token(STAR);
        mcc_consume_token(RANGLE);
          p.LexStates = null;
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case LANGLE:
          mcc_consume_token(LANGLE);
          states = new List<String>();
          t = mcc_consume_token(IDENTIFIER);
          states.Add(t.image);
          while (true) {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case COMMA:
              ;
              break;
            default:
              mcc_la1[7] = mcc_gen;
              goto label_3;
            }
            mcc_consume_token(COMMA);
            t = mcc_consume_token(IDENTIFIER);
          states.Add(t.image);
          }label_3: ;
          
          mcc_consume_token(RANGLE);
          p.LexStates = states.ToArray();
          break;
        default:
          mcc_la1[8] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      mcc_la1[9] = mcc_gen;
      ;
      break;
    }
    regexpr_kind(p);
          if (p.Kind != TokenProduction.TOKEN && Options.getUserTokenManager()) {
            CSharpCCErrors.Warning(GetToken(0), "Regular expression is being treated as if it were a TOKEN since option USER_TOKEN_MANAGER has been set to true.");
          }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LBRACKET:
      mcc_consume_token(LBRACKET);
      t = mcc_consume_token(_IGNORE_CASE);
      mcc_consume_token(RBRACKET);
          p.IgnoreCase = true;
          if (Options.getUserTokenManager()) {
            CSharpCCErrors.Warning(t, "Ignoring \"IGNORE_CASE\" specification since option USER_TOKEN_MANAGER has been set to true.");
          }
      break;
    default:
      mcc_la1[10] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(COLON);
    mcc_consume_token(LBRACE);
    regexpr_spec(p);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        mcc_la1[11] = mcc_gen;
        goto label_4;
      }
      mcc_consume_token(BIT_OR);
      regexpr_spec(p);
    }label_4: ;
    
    t = mcc_consume_token(RBRACE);
          p.LastToken = t;
          CSharpCCParserInternals.addregexpr(p);
  }

  public void token_manager_decls() {
          IList<Token> decls = new List<Token>();
          Token t;
    t = mcc_consume_token(_TOKEN_MGR_DECLS);
    mcc_consume_token(COLON);
    ClassOrInterfaceBody(false, decls);
          CSharpCCParserInternals.add_token_manager_decls(t, decls);
  }

  public void regexpr_kind(TokenProduction p) {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case _TOKEN:
      mcc_consume_token(_TOKEN);
          p.Kind = TokenProduction.TOKEN;
      break;
    case _SPECIAL_TOKEN:
      mcc_consume_token(_SPECIAL_TOKEN);
          p.Kind = TokenProduction.SPECIAL;
      break;
    case _SKIP:
      mcc_consume_token(_SKIP);
          p.Kind = TokenProduction.SKIP;
      break;
    case _MORE:
      mcc_consume_token(_MORE);
          p.Kind = TokenProduction.MORE;
      break;
    default:
      mcc_la1[12] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void regexpr_spec(TokenProduction p) {
          Container c = new Container();
          Action act = new Action();
          Token t = null;
          RegExprSpec res = new RegExprSpec();
    regular_expression(c);
          res.RegularExpression = (RegularExpression)c.member;
          res.RegularExpression.TokenProductionContext = p;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LBRACE:
          t = GetToken(1);
      Block(act.ActionTokens);
          if (Options.getUserTokenManager()) {
            CSharpCCErrors.Warning(t, "Ignoring action in regular expression specification since option USER_TOKEN_MANAGER has been set to true.");
          }
          if (res.RegularExpression.IsPrivate) {
            CSharpCCErrors.ParseError(t, "Actions are not permitted on private (#) regular expressions.");
          }
      break;
    default:
      mcc_la1[13] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case COLON:
      mcc_consume_token(COLON);
      t = mcc_consume_token(IDENTIFIER);
          res.NextState = t.image;
          if (res.RegularExpression.IsPrivate) {
            CSharpCCErrors.ParseError(t, "Lexical state changes are not permitted after private (#) regular expressions.");
          }
      break;
    default:
      mcc_la1[14] = mcc_gen;
      ;
      break;
    }
          res.Action = act;
          res.NextStateToken = t;
          p.RegexSpecs.Add(res);
  }

  public void expansion_choices(Container c1) {
          bool morethanone = false;
          Choice ch = null; // unnecessary initialization to make compiler happy!
          Container c2 = new Container();
    expansion(c1);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        mcc_la1[15] = mcc_gen;
        goto label_5;
      }
      mcc_consume_token(BIT_OR);
      expansion(c2);
          if (morethanone) {
            ch.Choices.Add((Expansion) c2.member);
            ((Expansion)c2.member).Parent = ch;
          } else {
            morethanone = true;
            ch = new Choice((Expansion)c1.member);
            ((Expansion)c1.member).Parent = ch;
            ch.Choices.Add((Expansion)c2.member);
            ((Expansion)c2.member).Parent = ch;
          }
    }label_5: ;
    
          if (morethanone) {
            c1.member = ch;
          }
  }

  public void expansion(Container c1) {
          Sequence seq = new Sequence();
          Container c2 = new Container();
          Lookahead la = new Lookahead();
          Token t = GetToken(1);
          seq.Line = t.beginLine;
          seq.Column=t.beginColumn;
          la.Line = t.beginLine;
          la.Column =t.beginColumn;
          la.Amount = Options.getLookahead();
          la.Expansion = null;
          la.IsExplicit = false;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case _LOOKAHEAD:
      t = mcc_consume_token(_LOOKAHEAD);
      mcc_consume_token(LPAREN);
      la = local_lookahead();
      mcc_consume_token(RPAREN);
          if (inLocalLA != 0 && la.Amount != 0) {
            CSharpCCErrors.Warning(t, "Only semantic lookahead specifications within other lookahead specifications is considered.  Syntactic lookahead is ignored.");
          }
      break;
    default:
      mcc_la1[16] = mcc_gen;
      ;
      break;
    }
          seq.Units.Add(la);
    while (true) {
      expansion_unit(c2);
          seq.Units.Add((Lookahead)c2.member);
          ((Expansion)c2.member).Parent = seq;
          ((Expansion)c2.member).Ordinal = seq.Units.Count-1;
      if (NotTailOfExpansionUnit()) {
        ;
      } else {
        goto label_6;
      }
    }label_6: ;
    
          if (la.Expansion == null) {
            la.Expansion = seq;
          }
          c1.member = seq;
  }

  public Lookahead local_lookahead() {
          Lookahead la = new Lookahead();
          la.IsExplicit = true;
          Token t = GetToken(1);
          la.Line = t.beginLine;
          la.Column = t.beginColumn;
          la.Expansion = null;
          Container c = new Container();
          bool commaAtEnd = false, emptyLA = true;
          int laAmount;
          inLocalLA++;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INTEGER_LITERAL:
      laAmount = IntegerLiteral();
          emptyLA = false;
          la.Amount = laAmount;
      break;
    default:
      mcc_la1[17] = mcc_gen;
      ;
      break;
    }
    if (!emptyLA && (GetToken(1).kind != RPAREN)) {
      mcc_consume_token(COMMA);
          commaAtEnd = true;
    } else {
      ;
    }
    if (GetToken(1).kind != RPAREN && GetToken(1).kind != LBRACE) {
      expansion_choices(c);
          emptyLA = false; commaAtEnd = false;
          la.Expansion = (Expansion)c.member;
    } else {
      ;
    }
    if (!emptyLA && !commaAtEnd && (GetToken(1).kind != RPAREN)) {
      mcc_consume_token(COMMA);
          commaAtEnd = true;
    } else {
      ;
    }
    if (emptyLA || commaAtEnd) {
      mcc_consume_token(LBRACE);
      Expression(la.ActionTokens);
      mcc_consume_token(RBRACE);
          if (emptyLA) {
            la.Amount = 0;
          }
    } else {
      ;
    }
          inLocalLA--;
          {return la;}
    throw new Exception("Missing return statement in function");
  }

  public void expansion_unit(Container c) {
          String name;
          IList<Token> lhsTokens = new List<Token>();
          NonTerminal nt;
          Action act;
          Token t;
          Lookahead la;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case _LOOKAHEAD:
      /*
         * We give this priority over primary expressions which use LOOKAHEAD as the
         * name of its identifier.
         */
        t = mcc_consume_token(_LOOKAHEAD);
      mcc_consume_token(LPAREN);
      la = local_lookahead();
      mcc_consume_token(RPAREN);
          // Now set the la_expansion field of la with a dummy
          // expansion (we use EOF).
          la.Expansion =new REndOfFile();
          // Create a singleton choice with an empty action.
          Choice ch = new Choice(t);
          Sequence seq = new Sequence(t, la);
          la.Parent = seq; la.Ordinal = 0;
          act = new Action();
          act.Line = t.beginLine;
          act.Column = t.beginColumn;
          seq.Units.Add(act);
          act.Parent = seq; act.Ordinal = 1;
          ch.Choices.Add(seq);
          seq.Parent = ch; seq.Ordinal = 0;
          if (la.Amount != 0) {
            if (la.ActionTokens.Count != 0) {
              CSharpCCErrors.Warning(t, "Encountered LOOKAHEAD(...) at a non-choice location.  Only semantic lookahead will be considered here.");
            } else {
              CSharpCCErrors.Warning(t, "Encountered LOOKAHEAD(...) at a non-choice location.  This will be ignored.");
            }
          }
          c.member = ch;
      break;
    case LBRACE:
          act = new Action();
          t = GetToken(1);
          act.Line = t.beginLine;
          act.Column = t.beginColumn;
          inAction = true;
      Block(act.ActionTokens);
          inAction = false;
          if (inLocalLA != 0) {
            CSharpCCErrors.Warning(t, "Action within lookahead specification will be ignored.");
          }
          c.member = act;
      break;
    case LBRACKET:
      t = mcc_consume_token(LBRACKET);
      expansion_choices(c);
      mcc_consume_token(RBRACKET);
          c.member = new ZeroOrOne(t, (Expansion)c.member);
      break;
    case TRY:
          Container expch = new Container();
          List<IList<Token>> types = new List<IList<Token>>();
          List<Token> ids = new List<Token>();
          List<IList<Token>> catchblks = new List<IList<Token>>();
          List<Token> finallyblk = null;
          List<Token> vec = new List<Token>();
          Token t0;
      t0 = mcc_consume_token(TRY);
      mcc_consume_token(LBRACE);
      expansion_choices(expch);
      mcc_consume_token(RBRACE);
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case CATCH:
          ;
          break;
        default:
          mcc_la1[18] = mcc_gen;
          goto label_7;
        }
        mcc_consume_token(CATCH);
        mcc_consume_token(LPAREN);
        Name(vec);
        t = mcc_consume_token(IDENTIFIER);
        mcc_consume_token(RPAREN);
          types.Add(vec);
          ids.Add(t);
          vec = new List<Token>();
          inAction = true;
        Block(vec);
          inAction = false;
          catchblks.Add(vec);
          vec = new List<Token>();
      }label_7: ;
      
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case FINALLY:
          inAction = true;
        mcc_consume_token(FINALLY);
        Block(vec);
          inAction = false;
          finallyblk = vec;
        break;
      default:
        mcc_la1[19] = mcc_gen;
        ;
        break;
      }
          CSharpCCParserInternals.makeTryBlock(t0, c, expch, types, ids, catchblks, finallyblk);
      break;
    default:
      mcc_la1[24] = mcc_gen;
      if (mcc_2_4(2147483647)) {
        if (mcc_2_2(2147483647)) {
          Token first = GetToken(1);
          PrimaryExpression();
          Token last = GetToken(0);
          mcc_consume_token(ASSIGN);
          t = first;
          while (true) {
            lhsTokens.Add(t);
            if (t == last) break;
            t = t.next;
          }
        } else {
          ;
        }
        if (mcc_2_3(2147483647)) {
          nt = new NonTerminal();
          t = GetToken(1);
          nt.Line = t.beginLine;
          nt.Column = t.beginColumn;
          nt.LhsTokens = lhsTokens;
          name = identifier();
          Arguments(nt.ArgumentTokens);
          nt.Name = name;
          c.member = nt;
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case STRING_LITERAL:
          case LANGLE:
            regular_expression(c);
          ((RegularExpression)(c.member)).LhsTokens = lhsTokens;
          CSharpCCParserInternals.add_inline_regexpr((RegularExpression)(c.member));
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case DOT:
              mcc_consume_token(DOT);
              t = mcc_consume_token(IDENTIFIER);
                               ((RegularExpression)(c.member)).RhsToken = t;
              break;
            default:
              mcc_la1[20] = mcc_gen;
              ;
              break;
            }
            break;
          default:
            mcc_la1[21] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
        }
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case LPAREN:
          t = mcc_consume_token(LPAREN);
          expansion_choices(c);
          mcc_consume_token(RPAREN);
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case HOOK:
          case PLUS:
          case STAR:
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case PLUS:
              mcc_consume_token(PLUS);
           c.member = new OneOrMore(t, (Expansion)c.member);
              break;
            case STAR:
              mcc_consume_token(STAR);
           c.member = new ZeroOrMore(t, (Expansion)c.member);
              break;
            case HOOK:
              mcc_consume_token(HOOK);
           c.member = new ZeroOrOne(t, (Expansion)c.member);
              break;
            default:
              mcc_la1[22] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            mcc_la1[23] = mcc_gen;
            ;
            break;
          }
          break;
        default:
          mcc_la1[25] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
  }

  public void regular_expression(Container c) {
          REndOfFile ef;
          String image;
          bool private_rexp = false;
          Token t = GetToken(1);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case STRING_LITERAL:
      image = StringLiteral();
          c.member = new RStringLiteral(t, image);
      break;
    default:
      mcc_la1[28] = mcc_gen;
      if (mcc_2_5(3)) {
          image = "";
        mcc_consume_token(LANGLE);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 129:
        case IDENTIFIER:
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case 129:
            mcc_consume_token(129);
          private_rexp = true;
            break;
          default:
            mcc_la1[26] = mcc_gen;
            ;
            break;
          }
          image = identifier();
          mcc_consume_token(COLON);
          break;
        default:
          mcc_la1[27] = mcc_gen;
          ;
          break;
        }
        complex_regular_expression_choices(c);
        mcc_consume_token(RANGLE);
          RegularExpression re;
          if (c.member is RJustName) {
            RSequence seq = new RSequence();
            seq.Units.Add((RegularExpression)c.member);
            re = seq;
          } else {
            re = (RegularExpression)c.member;
          }
          re.Label = image;
          re.IsPrivate = private_rexp;
          re.Line = t.beginLine;
          re.Column = t.beginColumn;
          c.member = re;
      } else if (mcc_2_6(2)) {
        mcc_consume_token(LANGLE);
        image = identifier();
        mcc_consume_token(RANGLE);
          c.member = new RJustName(t, image);
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case LANGLE:
          mcc_consume_token(LANGLE);
          mcc_consume_token(_EOF);
          mcc_consume_token(RANGLE);
          ef = new REndOfFile();
          ef.Line = t.beginLine;
          ef.Column = t.beginColumn;
          ef.Ordinal = 0;
          c.member = ef;
          break;
        default:
          mcc_la1[29] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
  }

  public void complex_regular_expression_choices(Container c1) {
          bool morethanone = false;
          RChoice ch = null; // unnecessary initialization to make Java compiler happy!
          Container c2 = new Container();
    complex_regular_expression(c1);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        mcc_la1[30] = mcc_gen;
        goto label_8;
      }
      mcc_consume_token(BIT_OR);
      complex_regular_expression(c2);
          if (morethanone) {
            ch.Choices.Add((RegularExpression)c2.member);
          } else {
            morethanone = true;
            ch = new RChoice();
            ch.Line = ((RegularExpression)c1.member).Line;
            ch.Column = ((RegularExpression)c1.member).Column;
            ch.Choices.Add((RegularExpression)c1.member);
            ch.Choices.Add((RegularExpression)c2.member);
          }
    }label_8: ;
    
          if (morethanone) {
            c1.member = ch;
          }
  }

  public void complex_regular_expression(Container c1) {
          int count = 0;
          RSequence seq = null; // unnecessary initialization to make compiler happy!
          Container c2 = new Container();
    while (true) {
      complex_regular_expression_unit(c2);
          count++;
          if (count == 1) {
            c1.member = c2.member; // if count does not go beyond 1, we are done.
          } else if (count == 2) { // more than 1, so create a sequence.
            seq = new RSequence();
            seq.Line = ((RegularExpression)c1.member).Line;
            seq.Column = ((RegularExpression)c1.member).Column;
            seq.Units.Add((RegularExpression)c1.member);
            seq.Units.Add((RegularExpression)c2.member);
          } else {
            seq.Units.Add((RegularExpression)c2.member);
          }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case STRING_LITERAL:
      case LPAREN:
      case LBRACKET:
      case LANGLE:
      case TILDE:
        ;
        break;
      default:
        mcc_la1[31] = mcc_gen;
        goto label_9;
      }
    }label_9: ;
    
          if (count > 1) {
            c1.member = seq;
          }
  }

  public void complex_regular_expression_unit(Container c) {
          String image;
          Token t = GetToken(1);
          int r1 = 0, r2 = -1;
          bool hasMax = false;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case STRING_LITERAL:
      image = StringLiteral();
          c.member = new RStringLiteral(t, image);
      break;
    case LANGLE:
      mcc_consume_token(LANGLE);
      image = identifier();
      mcc_consume_token(RANGLE);
          c.member = new RJustName(t, image);
      break;
    case LBRACKET:
    case TILDE:
      character_list(c);
      break;
    case LPAREN:
      mcc_consume_token(LPAREN);
      complex_regular_expression_choices(c);
      mcc_consume_token(RPAREN);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LBRACE:
      case HOOK:
      case PLUS:
      case STAR:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case PLUS:
          mcc_consume_token(PLUS);
          c.member = new ROneOrMore(t, (RegularExpression)c.member);
          break;
        case STAR:
          mcc_consume_token(STAR);
          c.member = new RZeroOrMore(t, (RegularExpression)c.member);
          break;
        case HOOK:
          mcc_consume_token(HOOK);
          RZeroOrOne zorexp = new RZeroOrOne();
          zorexp.Line = t.beginLine;
          zorexp.Column = t.beginColumn;
          zorexp.RegularExpression = (RegularExpression)c.member;
          c.member = zorexp;
          break;
        case LBRACE:
          mcc_consume_token(LBRACE);
          r1 = IntegerLiteral();
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case COMMA:
            mcc_consume_token(COMMA);
                 hasMax = true;
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case INTEGER_LITERAL:
              r2 = IntegerLiteral();
              break;
            default:
              mcc_la1[32] = mcc_gen;
              ;
              break;
            }
            break;
          default:
            mcc_la1[33] = mcc_gen;
            ;
            break;
          }
          mcc_consume_token(RBRACE);
          RRepetitionRange rrrexp = new RRepetitionRange();
          rrrexp.Line = t.beginLine;
          rrrexp.Column = t.beginColumn;
          rrrexp.Min = r1;
          rrrexp.Max = r2;
        rrrexp.HasMax = hasMax;
          rrrexp.RegularExpression = (RegularExpression)c.member;
          c.member = rrrexp;
          break;
        default:
          mcc_la1[34] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        mcc_la1[35] = mcc_gen;
        ;
        break;
      }
      break;
    default:
      mcc_la1[36] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void character_list(Container c1) {
          RCharacterList chlist = new RCharacterList();
          Token t = GetToken(1);
          chlist.Line = t.beginLine;
          chlist.Column = t.beginColumn;
          Container c2 = new Container();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case TILDE:
      mcc_consume_token(TILDE);
          chlist.Negated = true;
      break;
    default:
      mcc_la1[37] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(LBRACKET);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case STRING_LITERAL:
      character_descriptor(c2);
          chlist.Descriptors.Add(c2.member);
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case COMMA:
          ;
          break;
        default:
          mcc_la1[38] = mcc_gen;
          goto label_10;
        }
        mcc_consume_token(COMMA);
        character_descriptor(c2);
          chlist.Descriptors.Add(c2.member);
      }label_10: ;
      
      break;
    default:
      mcc_la1[39] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(RBRACKET);
          c1.member = chlist;
  }

  public void character_descriptor(Container c) {
          char c1, c2 = ' '; // unnecessary initialization to make compiler happy!
          bool isrange = false;
          String imageL, imageR;
          Token t = GetToken(1);
    imageL = StringLiteral();
          c1 = CSharpCCParserInternals.character_descriptor_assign(GetToken(0), imageL);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case MINUS:
      mcc_consume_token(MINUS);
      imageR = StringLiteral();
          isrange = true;
          c2 = CSharpCCParserInternals.character_descriptor_assign(GetToken(0), imageR, imageL);
      break;
    default:
      mcc_la1[40] = mcc_gen;
      ;
      break;
    }
          if (isrange) {
            CharacterRange cr = new CharacterRange();
            cr.Line = t.beginLine;
            cr.Column = t.beginColumn;
        cr.Left =c1;
        cr.Right = c2;
            c.member = cr;
          } else {
            SingleCharacter sc = new SingleCharacter();
            sc.Line = t.beginLine;
            sc.Column = t.beginColumn;
            sc.Character = c1;
            c.member = sc;
          }
  }

  public String identifier() {
          Token t;
    t = mcc_consume_token(IDENTIFIER);
          {return t.image;}
    throw new Exception("Missing return statement in function");
  }

/**********************************************
 * THE C# GRAMMAR SPECIFICATION STARTS HERE *
 **********************************************/

/*
 * The C# grammar is modified to use sequences of tokens
 * for the missing tokens - those that include "<<" and ">>".
 */

/*
 * The following production defines Java identifiers - it
 * includes the reserved words of JavaCC also.
 */
  public Token CSharpIdentifier() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case IDENTIFIER:
      mcc_consume_token(IDENTIFIER);
      break;
    case _LOOKAHEAD:
      mcc_consume_token(_LOOKAHEAD);
      break;
    case _IGNORE_CASE:
      mcc_consume_token(_IGNORE_CASE);
      break;
    case _PARSER_BEGIN:
      mcc_consume_token(_PARSER_BEGIN);
      break;
    case _PARSER_END:
      mcc_consume_token(_PARSER_END);
      break;
    case 130:
      mcc_consume_token(130);
      break;
    case _TOKEN:
      mcc_consume_token(_TOKEN);
      break;
    case _SPECIAL_TOKEN:
      mcc_consume_token(_SPECIAL_TOKEN);
      break;
    case _MORE:
      mcc_consume_token(_MORE);
      break;
    case _SKIP:
      mcc_consume_token(_SKIP);
      break;
    case _TOKEN_MGR_DECLS:
      mcc_consume_token(_TOKEN_MGR_DECLS);
      break;
    case _EOF:
      mcc_consume_token(_EOF);
      break;
    default:
      mcc_la1[41] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
          Token retval = GetToken(0);
          retval.kind = IDENTIFIER;
          {return retval;}
    throw new Exception("Missing return statement in function");
  }

/*
 * Program structuring syntax follows.
 */
  public void CompilationUnit() {
          CSharpCCParserInternals.set_initial_cu_token(GetToken(1));
    if (mcc_2_7(2147483647)) {
      NamespaceDeclaration();
    } else {
      ;
    }
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case USING:
        ;
        break;
      default:
        mcc_la1[42] = mcc_gen;
        goto label_11;
      }
      UsingDeclaration();
    }label_11: ;
    
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case EXTERN:
      case INTERFACE:
      case INTERNAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case READONLY:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
      case LBRACKET:
      case SEMICOLON:
        ;
        break;
      default:
        mcc_la1[43] = mcc_gen;
        goto label_12;
      }
      TypeDeclaration();
    }label_12: ;
    
          CSharpCCParserInternals.insertionpointerrors(GetToken(1));
  }

  public void NamespaceDeclaration() {
    mcc_consume_token(NAMESPACE);
    Name(null);
    mcc_consume_token(SEMICOLON);
  }

  public void UsingDeclaration() {
    mcc_consume_token(USING);
    Name(null);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ASSIGN:
      mcc_consume_token(ASSIGN);
      Name(null);
      break;
    default:
      mcc_la1[44] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(SEMICOLON);
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  public int Modifiers() {
   int modifiers = 0;
    while (true) {
      if (mcc_2_8(2)) {
        ;
      } else {
        goto label_13;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PUBLIC:
        mcc_consume_token(PUBLIC);
              modifiers |= ModifierSet.PUBLIC;
        break;
      case STATIC:
        mcc_consume_token(STATIC);
              modifiers |= ModifierSet.STATIC;
        break;
      case PROTECTED:
        mcc_consume_token(PROTECTED);
                 modifiers |= ModifierSet.PROTECTED;
        break;
      case PRIVATE:
        mcc_consume_token(PRIVATE);
               modifiers |= ModifierSet.PRIVATE;
        break;
      case INTERNAL:
        mcc_consume_token(INTERNAL);
                       modifiers |= ModifierSet.INTERNAL;
        break;
      case READONLY:
        mcc_consume_token(READONLY);
                modifiers |= ModifierSet.READONLY;
        break;
      case ABSTRACT:
        mcc_consume_token(ABSTRACT);
                modifiers |= ModifierSet.ABSTRACT;
        break;
      case EXTERN:
        mcc_consume_token(EXTERN);
              modifiers |= ModifierSet.EXTERN;
        break;
      case TRANSIENT:
        mcc_consume_token(TRANSIENT);
                 modifiers |= ModifierSet.TRANSIENT;
        break;
      case VOLATILE:
        mcc_consume_token(VOLATILE);
                modifiers |= ModifierSet.VOLATILE;
        break;
      case LBRACKET:
        Annotation();
        break;
      default:
        mcc_la1[45] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_13: ;
    
    {return modifiers;}
    throw new Exception("Missing return statement in function");
  }

/*
 * Declaration syntax follows.
 */
  public void TypeDeclaration() {
   int modifiers;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SEMICOLON:
      mcc_consume_token(SEMICOLON);
      break;
    case ABSTRACT:
    case CLASS:
    case ENUM:
    case EXTERN:
    case INTERFACE:
    case INTERNAL:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case READONLY:
    case STATIC:
    case TRANSIENT:
    case VOLATILE:
    case LBRACKET:
      modifiers = Modifiers();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case CLASS:
      case INTERFACE:
        ClassOrInterfaceDeclaration(modifiers, null);
        break;
      case ENUM:
        EnumDeclaration(modifiers);
        break;
      default:
        mcc_la1[46] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[47] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void ClassOrInterfaceDeclaration(int modifiers, IList tokens) {
          typeNesting++;
          Token t;
          bool is_parser_class = false;
          bool isInterface = false;
  if (tokens == null)
    tokens = new ArrayList();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case CLASS:
      mcc_consume_token(CLASS);
      break;
    case INTERFACE:
      mcc_consume_token(INTERFACE);
                                  isInterface = true;
      break;
    default:
      mcc_la1[48] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    t = mcc_consume_token(IDENTIFIER);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LANGLE:
      TypeParameters();
      break;
    default:
      mcc_la1[49] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case COLON:
      InheritList();
      break;
    default:
      mcc_la1[50] = mcc_gen;
      ;
      break;
    }
          if (t.image.Equals(parserTypeName) && typeNesting == 1 && processingTypeUnit) {
            is_parser_class = true;
            CSharpCCParserInternals.setinsertionpoint(GetToken(1), 1);
          }
    ClassOrInterfaceBody(isInterface, null);
          if (is_parser_class) {
            CSharpCCParserInternals.setinsertionpoint(GetToken(0), 2);
          }
          typeNesting--;
  }

  public void InheritList() {
    mcc_consume_token(COLON);
    ClassOrInterfaceType();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[51] = mcc_gen;
        goto label_14;
      }
      mcc_consume_token(COMMA);
      ClassOrInterfaceType();
    }label_14: ;
    
  }

  public void EnumDeclaration(int modifiers) {
    mcc_consume_token(ENUM);
    mcc_consume_token(IDENTIFIER);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case COLON:
      InheritList();
      break;
    default:
      mcc_la1[52] = mcc_gen;
      ;
      break;
    }
    EnumBody();
  }

  public void EnumBody() {
    mcc_consume_token(LBRACE);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case IDENTIFIER:
      EnumConstant();
      while (true) {
        if (mcc_2_9(2)) {
          ;
        } else {
          goto label_15;
        }
        mcc_consume_token(COMMA);
        EnumConstant();
      }label_15: ;
      
      break;
    default:
      mcc_la1[53] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(RBRACE);
  }

  public void EnumConstant() {
    mcc_consume_token(IDENTIFIER);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPAREN:
      Arguments(null);
      break;
    default:
      mcc_la1[54] = mcc_gen;
      ;
      break;
    }
  }

  public void TypeParameters() {
    mcc_consume_token(LANGLE);
    TypeParameter();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[55] = mcc_gen;
        goto label_16;
      }
      mcc_consume_token(COMMA);
      TypeParameter();
    }label_16: ;
    
    mcc_consume_token(RANGLE);
  }

  public void TypeParameter() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 131:
    case 132:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 131:
        mcc_consume_token(131);
        break;
      case 132:
        mcc_consume_token(132);
        break;
      default:
        mcc_la1[56] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[57] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(IDENTIFIER);
  }

  public void ClassOrInterfaceBody(bool isInterface, IList<Token> tokens) {
          Token first, last;
          if (tokens == null)
            tokens = new List<Token>();
    mcc_consume_token(LBRACE);
          first = GetToken(1);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ABSTRACT:
      case BOOL:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case EXTERN:
      case FLOAT:
      case INT:
      case INTERFACE:
      case INTERNAL:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case READONLY:
      case SHORT:
      case STATIC:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case LANGLE:
      case IDENTIFIER:
        ;
        break;
      default:
        mcc_la1[58] = mcc_gen;
        goto label_17;
      }
      ClassOrInterfaceBodyDeclaration(isInterface);
    }label_17: ;
    
          last = GetToken(0);
    mcc_consume_token(RBRACE);
          if (last.next != first) { // i.e., this is not an empty sequence
            Token t = first;
            while (true) {
              tokens.Add(t);
              if (t == last) break;
              t = t.next;
            }
          }
  }

  public void ClassOrInterfaceBodyDeclaration(bool isInterface) {
   int modifiers;
    if (mcc_2_12(2)) {
      Initializer();
     if (isInterface)
        {throw new ParseException("An interface cannot have initializers");}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ABSTRACT:
      case BOOL:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case EXTERN:
      case FLOAT:
      case INT:
      case INTERFACE:
      case INTERNAL:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case READONLY:
      case SHORT:
      case STATIC:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case LBRACKET:
      case LANGLE:
      case IDENTIFIER:
        modifiers = Modifiers();
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case CLASS:
        case INTERFACE:
          ClassOrInterfaceDeclaration(modifiers, null);
          break;
        case ENUM:
          EnumDeclaration(modifiers);
          break;
        default:
          mcc_la1[59] = mcc_gen;
          if (mcc_2_10(2147483647)) {
            ConstructorDeclaration();
          } else if (mcc_2_11(2147483647)) {
            FieldDeclaration(modifiers);
          } else {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case BOOL:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case VOID:
            case LANGLE:
            case IDENTIFIER:
              MethodDeclaration(modifiers);
              break;
            default:
              mcc_la1[60] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        }
        break;
      case SEMICOLON:
        mcc_consume_token(SEMICOLON);
        break;
      default:
        mcc_la1[61] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public void FieldDeclaration(int modifiers) {
    Type();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        mcc_la1[62] = mcc_gen;
        goto label_18;
      }
      mcc_consume_token(LBRACKET);
      mcc_consume_token(RBRACKET);
    }label_18: ;
    
    VariableDeclarator();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[63] = mcc_gen;
        goto label_19;
      }
      mcc_consume_token(COMMA);
      VariableDeclarator();
    }label_19: ;
    
    mcc_consume_token(SEMICOLON);
  }

  public void VariableDeclarator() {
    VariableDeclaratorId();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ASSIGN:
      mcc_consume_token(ASSIGN);
      VariableInitializer();
      break;
    default:
      mcc_la1[64] = mcc_gen;
      ;
      break;
    }
  }

  public void VariableDeclaratorId() {
    mcc_consume_token(IDENTIFIER);
  }

  public void VariableInitializer() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LBRACE:
      ArrayInitializer();
      break;
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BASE:
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case 130:
    case IDENTIFIER:
      Expression(null);
      break;
    default:
      mcc_la1[65] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void ArrayInitializer() {
    mcc_consume_token(LBRACE);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BASE:
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case 130:
    case IDENTIFIER:
      VariableInitializer();
      while (true) {
        if (mcc_2_13(2)) {
          ;
        } else {
          goto label_20;
        }
        mcc_consume_token(COMMA);
        VariableInitializer();
      }label_20: ;
      
      break;
    default:
      mcc_la1[66] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case COMMA:
      mcc_consume_token(COMMA);
      break;
    default:
      mcc_la1[67] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(RBRACE);
  }

  public void MethodDeclaration(int modifiers) {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LANGLE:
      TypeParameters();
      break;
    default:
      mcc_la1[68] = mcc_gen;
      ;
      break;
    }
    ResultType(null);
    MethodDeclarator();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LBRACE:
      Block(null);
      break;
    case SEMICOLON:
      mcc_consume_token(SEMICOLON);
      break;
    default:
      mcc_la1[69] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void MethodDeclarator() {
    mcc_consume_token(IDENTIFIER);
    FormalParameters(null);
  }

  public void FormalParameters(IList<Token> tokens) {
          Token first, last;
          if (tokens == null)
            tokens = new List<Token>();
    mcc_consume_token(LPAREN);
          first = GetToken(1);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case BOOL:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case 133:
    case IDENTIFIER:
      FormalParameter();
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case COMMA:
          ;
          break;
        default:
          mcc_la1[70] = mcc_gen;
          goto label_21;
        }
        mcc_consume_token(COMMA);
        FormalParameter();
      }label_21: ;
      
      break;
    default:
      mcc_la1[71] = mcc_gen;
      ;
      break;
    }
          last = GetToken(0);
    mcc_consume_token(RPAREN);
          if (last.next != first) { // i.e., this is not an empty sequence
            Token t = first;
            while (true) {
              tokens.Add(t);
              if (t == last) break;
              t = t.next;
            }
          }
  }

  public void FormalParameter() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 133:
      mcc_consume_token(133);
      break;
    default:
      mcc_la1[72] = mcc_gen;
      ;
      break;
    }
    Type();
    VariableDeclaratorId();
  }

  public void ConstructorDeclaration() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LANGLE:
      TypeParameters();
      break;
    default:
      mcc_la1[73] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(IDENTIFIER);
    FormalParameters(null);
    mcc_consume_token(LBRACE);
    if (mcc_2_14(2147483647)) {
      ExplicitConstructorInvocation();
    } else {
      ;
    }
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ABSTRACT:
      case BASE:
      case BOOL:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case EXTERN:
      case FALSE:
      case FLOAT:
      case FOR:
      case GOTO:
      case IF:
      case INT:
      case INTERFACE:
      case INTERNAL:
      case LOCK:
      case LONG:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case READONLY:
      case RETURN:
      case SHORT:
      case STATIC:
      case SWITCH:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOLATILE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case INCR:
      case DECR:
      case 130:
      case IDENTIFIER:
        ;
        break;
      default:
        mcc_la1[74] = mcc_gen;
        goto label_22;
      }
      BlockStatement();
    }label_22: ;
    
    mcc_consume_token(RBRACE);
  }

  public void ExplicitConstructorInvocation() {
    if (mcc_2_15(2147483647)) {
      mcc_consume_token(COLON);
      mcc_consume_token(THIS);
      Arguments(null);
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COLON:
        mcc_consume_token(COLON);
        mcc_consume_token(BASE);
        Arguments(null);
        break;
      default:
        mcc_la1[75] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public void Initializer() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case STATIC:
      mcc_consume_token(STATIC);
      break;
    default:
      mcc_la1[76] = mcc_gen;
      ;
      break;
    }
    Block(null);
  }

/*
 * Type, name and expression syntax follows.
 */
  public void Type() {
    if (mcc_2_16(2)) {
      ReferenceType();
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BOOL:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        PrimitiveType();
        break;
      default:
        mcc_la1[77] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public void ReferenceType() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case BOOL:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      PrimitiveType();
      while (true) {
        mcc_consume_token(LBRACKET);
        mcc_consume_token(RBRACKET);
        if (mcc_2_17(2)) {
          ;
        } else {
          goto label_23;
        }
      }label_23: ;
      
      break;
    case IDENTIFIER:
      ClassOrInterfaceType();
      while (true) {
        if (mcc_2_18(2)) {
          ;
        } else {
          goto label_24;
        }
        mcc_consume_token(LBRACKET);
        mcc_consume_token(RBRACKET);
      }label_24: ;
      
      break;
    default:
      mcc_la1[78] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void ClassOrInterfaceType() {
    mcc_consume_token(IDENTIFIER);
    if (mcc_2_19(2)) {
      TypeArguments();
    } else {
      ;
    }
    while (true) {
      if (mcc_2_20(2)) {
        ;
      } else {
        goto label_25;
      }
      mcc_consume_token(DOT);
      mcc_consume_token(IDENTIFIER);
      if (mcc_2_21(2)) {
        TypeArguments();
      } else {
        ;
      }
    }label_25: ;
    
  }

  public void TypeArguments() {
    mcc_consume_token(LANGLE);
    TypeArgument();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[79] = mcc_gen;
        goto label_26;
      }
      mcc_consume_token(COMMA);
      TypeArgument();
    }label_26: ;
    
    mcc_consume_token(RANGLE);
  }

  public void TypeArgument() {
    ReferenceType();
  }

  public void PrimitiveType() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case BOOL:
      mcc_consume_token(BOOL);
      break;
    case CHAR:
      mcc_consume_token(CHAR);
      break;
    case BYTE:
      mcc_consume_token(BYTE);
      break;
    case SHORT:
      mcc_consume_token(SHORT);
      break;
    case INT:
      mcc_consume_token(INT);
      break;
    case LONG:
      mcc_consume_token(LONG);
      break;
    case FLOAT:
      mcc_consume_token(FLOAT);
      break;
    case DOUBLE:
      mcc_consume_token(DOUBLE);
      break;
    default:
      mcc_la1[80] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void ResultType(IList<Token> tokens) {
          Token first = GetToken(1);
          if (tokens == null)
            tokens = new List<Token>();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case VOID:
      mcc_consume_token(VOID);
      break;
    case BOOL:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      Type();
      break;
    default:
      mcc_la1[81] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
          Token last = GetToken(0);
          Token t = first;
          while (true) {
            tokens.Add(t);
            if (t == last) break;
            t = t.next;
          }
  }

  public void Name(IList<Token> tokens) {
          if (tokens == null)
            tokens = new List<Token>();
          Token first = GetToken(1);
    CSharpIdentifier();
    while (true) {
      if (mcc_2_22(2)) {
        ;
      } else {
        goto label_27;
      }
      mcc_consume_token(DOT);
      CSharpIdentifier();
    }label_27: ;
    
          Token last = GetToken(0);
          Token t = first;
          while (true) {
            tokens.Add(t);
            if (t == last) break;
            t = t.next;
          }
  }

  public void NameList() {
    Name(null);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[82] = mcc_gen;
        goto label_28;
      }
      mcc_consume_token(COMMA);
      Name(null);
    }label_28: ;
    
  }

/*
 * Expression syntax follows.
 */
  public void Expression(IList tokens) {
          Token first = GetToken(1);
          if (tokens == null)
            tokens = new ArrayList();
    ConditionalExpression();
    if (mcc_2_23(2)) {
      AssignmentOperator();
      Expression(null);
    } else {
      ;
    }
          Token last = GetToken(0);
          Token t = first;
          while (true) {
            tokens.Add(t);
            if (t == last) break;
            t = t.next;
          }
  }

  public void AssignmentOperator() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ASSIGN:
      mcc_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      mcc_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      mcc_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      mcc_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      mcc_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      mcc_consume_token(MINUSASSIGN);
      break;
    case 134:
      mcc_consume_token(134);
      break;
    case 135:
      mcc_consume_token(135);
      break;
    case ANDASSIGN:
      mcc_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      mcc_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      mcc_consume_token(ORASSIGN);
      break;
    default:
      mcc_la1[83] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void ConditionalExpression() {
    ConditionalOrExpression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case HOOK:
      mcc_consume_token(HOOK);
      Expression(null);
      mcc_consume_token(COLON);
      Expression(null);
      break;
    default:
      mcc_la1[84] = mcc_gen;
      ;
      break;
    }
  }

  public void ConditionalOrExpression() {
    ConditionalAndExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case SC_OR:
        ;
        break;
      default:
        mcc_la1[85] = mcc_gen;
        goto label_29;
      }
      mcc_consume_token(SC_OR);
      ConditionalAndExpression();
    }label_29: ;
    
  }

  public void ConditionalAndExpression() {
    InclusiveOrExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case SC_AND:
        ;
        break;
      default:
        mcc_la1[86] = mcc_gen;
        goto label_30;
      }
      mcc_consume_token(SC_AND);
      InclusiveOrExpression();
    }label_30: ;
    
  }

  public void InclusiveOrExpression() {
    ExclusiveOrExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        mcc_la1[87] = mcc_gen;
        goto label_31;
      }
      mcc_consume_token(BIT_OR);
      ExclusiveOrExpression();
    }label_31: ;
    
  }

  public void ExclusiveOrExpression() {
    AndExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case XOR:
        ;
        break;
      default:
        mcc_la1[88] = mcc_gen;
        goto label_32;
      }
      mcc_consume_token(XOR);
      AndExpression();
    }label_32: ;
    
  }

  public void AndExpression() {
    EqualityExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        mcc_la1[89] = mcc_gen;
        goto label_33;
      }
      mcc_consume_token(BIT_AND);
      EqualityExpression();
    }label_33: ;
    
  }

  public void EqualityExpression() {
    IsExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        mcc_la1[90] = mcc_gen;
        goto label_34;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case EQ:
        mcc_consume_token(EQ);
        break;
      case NE:
        mcc_consume_token(NE);
        break;
      default:
        mcc_la1[91] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      IsExpression();
    }label_34: ;
    
  }

  public void IsExpression() {
    RelationalExpression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case IS:
      mcc_consume_token(IS);
      Type();
      break;
    default:
      mcc_la1[92] = mcc_gen;
      ;
      break;
    }
  }

  public void RelationalExpression() {
    ShiftExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LANGLE:
      case LE:
      case GE:
      case RANGLE:
        ;
        break;
      default:
        mcc_la1[93] = mcc_gen;
        goto label_35;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LANGLE:
        mcc_consume_token(LANGLE);
        break;
      case RANGLE:
        mcc_consume_token(RANGLE);
        break;
      case LE:
        mcc_consume_token(LE);
        break;
      case GE:
        mcc_consume_token(GE);
        break;
      default:
        mcc_la1[94] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpression();
    }label_35: ;
    
  }

  public void ShiftExpression() {
    AdditiveExpression();
    while (true) {
      if (mcc_2_24(1)) {
        ;
      } else {
        goto label_36;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 136:
        mcc_consume_token(136);
        break;
      default:
        mcc_la1[95] = mcc_gen;
        if (mcc_2_25(1)) {
          RSIGNEDSHIFT();
        } else {
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      }
      AdditiveExpression();
    }label_36: ;
    
  }

  public void AdditiveExpression() {
    MultiplicativeExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        mcc_la1[96] = mcc_gen;
        goto label_37;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PLUS:
        mcc_consume_token(PLUS);
        break;
      case MINUS:
        mcc_consume_token(MINUS);
        break;
      default:
        mcc_la1[97] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }label_37: ;
    
  }

  public void MultiplicativeExpression() {
    UnaryExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        mcc_la1[98] = mcc_gen;
        goto label_38;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case STAR:
        mcc_consume_token(STAR);
        break;
      case SLASH:
        mcc_consume_token(SLASH);
        break;
      case REM:
        mcc_consume_token(REM);
        break;
      default:
        mcc_la1[99] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    }label_38: ;
    
  }

  public void UnaryExpression() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case PLUS:
    case MINUS:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PLUS:
        mcc_consume_token(PLUS);
        break;
      case MINUS:
        mcc_consume_token(MINUS);
        break;
      default:
        mcc_la1[100] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BASE:
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case 130:
    case IDENTIFIER:
      UnaryExpressionNotPlusMinus();
      break;
    default:
      mcc_la1[101] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void PreIncrementExpression() {
    mcc_consume_token(INCR);
    PrimaryExpression();
  }

  public void PreDecrementExpression() {
    mcc_consume_token(DECR);
    PrimaryExpression();
  }

  public void UnaryExpressionNotPlusMinus() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case BANG:
    case TILDE:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case TILDE:
        mcc_consume_token(TILDE);
        break;
      case BANG:
        mcc_consume_token(BANG);
        break;
      default:
        mcc_la1[102] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    default:
      mcc_la1[103] = mcc_gen;
      if (mcc_2_26(2147483647)) {
        CastExpression();
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case BASE:
        case FALSE:
        case NEW:
        case NULL:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case 130:
        case IDENTIFIER:
          PostfixExpression();
          break;
        default:
          mcc_la1[104] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  public void CastLookahead() {
    if (mcc_2_27(2)) {
      mcc_consume_token(LPAREN);
      PrimitiveType();
    } else if (mcc_2_28(2147483647)) {
      mcc_consume_token(LPAREN);
      Type();
      mcc_consume_token(LBRACKET);
      mcc_consume_token(RBRACKET);
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LPAREN:
        mcc_consume_token(LPAREN);
        Type();
        mcc_consume_token(RPAREN);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case TILDE:
          mcc_consume_token(TILDE);
          break;
        case BANG:
          mcc_consume_token(BANG);
          break;
        case LPAREN:
          mcc_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          mcc_consume_token(IDENTIFIER);
          break;
        case THIS:
          mcc_consume_token(THIS);
          break;
        case BASE:
          mcc_consume_token(BASE);
          break;
        case NEW:
          mcc_consume_token(NEW);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          Literal();
          break;
        default:
          mcc_la1[105] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        mcc_la1[106] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public void PostfixExpression() {
    PrimaryExpression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INCR:
    case DECR:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case INCR:
        mcc_consume_token(INCR);
        break;
      case DECR:
        mcc_consume_token(DECR);
        break;
      default:
        mcc_la1[107] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[108] = mcc_gen;
      ;
      break;
    }
  }

  public void CastExpression() {
    if (mcc_2_29(2147483647)) {
      mcc_consume_token(LPAREN);
      Type();
      mcc_consume_token(RPAREN);
      UnaryExpression();
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LPAREN:
        mcc_consume_token(LPAREN);
        Type();
        mcc_consume_token(RPAREN);
        UnaryExpressionNotPlusMinus();
        break;
      default:
        mcc_la1[109] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public void PrimaryExpression() {
    PrimaryPrefix();
    while (true) {
      if (mcc_2_30(2)) {
        ;
      } else {
        goto label_39;
      }
      PrimarySuffix();
    }label_39: ;
    
  }

  public void MemberSelector() {
    mcc_consume_token(DOT);
    TypeArguments();
    mcc_consume_token(IDENTIFIER);
  }

  public void PrimaryPrefix() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Literal();
      break;
    case THIS:
      mcc_consume_token(THIS);
      break;
    case BASE:
      mcc_consume_token(BASE);
      mcc_consume_token(DOT);
      mcc_consume_token(IDENTIFIER);
      break;
    case LPAREN:
      mcc_consume_token(LPAREN);
      Expression(null);
      mcc_consume_token(RPAREN);
      break;
    case NEW:
      AllocationExpression();
      break;
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case 130:
    case IDENTIFIER:
      Name(null);
      break;
    default:
      mcc_la1[110] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void PrimarySuffix() {
    if (mcc_2_31(2)) {
      mcc_consume_token(DOT);
      AllocationExpression();
    } else if (mcc_2_32(3)) {
      MemberSelector();
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LBRACKET:
        mcc_consume_token(LBRACKET);
        Expression(null);
        mcc_consume_token(RBRACKET);
        break;
      case DOT:
        mcc_consume_token(DOT);
        mcc_consume_token(IDENTIFIER);
        break;
      case LPAREN:
        Arguments(null);
        break;
      default:
        mcc_la1[111] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public void Literal() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INTEGER_LITERAL:
      mcc_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      mcc_consume_token(FLOATING_POINT_LITERAL);
      break;
    case CHARACTER_LITERAL:
      mcc_consume_token(CHARACTER_LITERAL);
      break;
    case STRING_LITERAL:
      mcc_consume_token(STRING_LITERAL);
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case NULL:
      NullLiteral();
      break;
    default:
      mcc_la1[112] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public int IntegerLiteral() {
    mcc_consume_token(INTEGER_LITERAL);
          try {
            {return Int32.Parse(token.image);}
          } catch (FormatException e) {
            {throw new InvalidOperationException();}
          }
    throw new Exception("Missing return statement in function");
  }

  public bool BooleanLiteral() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case TRUE:
      mcc_consume_token(TRUE);
          {return true;}
      break;
    case FALSE:
      mcc_consume_token(FALSE);
          {return false;}
      break;
    default:
      mcc_la1[113] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public String StringLiteral() {
          Token t;
    t = mcc_consume_token(STRING_LITERAL);
          {return CSharpCCParserInternals.remove_escapes_and_quotes(t, t.image);}
    throw new Exception("Missing return statement in function");
  }

  public void NullLiteral() {
    mcc_consume_token(NULL);
  }

  public void Arguments(IList<Token> tokens) {
          Token first, last;
          if (tokens == null)
            tokens = new List<Token>();
    mcc_consume_token(LPAREN);
          first = GetToken(1);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BASE:
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case 130:
    case IDENTIFIER:
      ArgumentList();
      break;
    default:
      mcc_la1[114] = mcc_gen;
      ;
      break;
    }
          last = GetToken(0);
    mcc_consume_token(RPAREN);
          if (last.next != first) { // i.e., this is not an empty sequence
            Token t = first;
            while (true) {
              tokens.Add(t);
              if (t == last) break;
              t = t.next;
            }
          }
  }

  public void ArgumentList() {
    Expression(null);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[115] = mcc_gen;
        goto label_40;
      }
      mcc_consume_token(COMMA);
      Expression(null);
    }label_40: ;
    
  }

  public void AllocationExpression() {
    if (mcc_2_33(2)) {
      mcc_consume_token(NEW);
      PrimitiveType();
      ArrayDimsAndInits();
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case NEW:
        mcc_consume_token(NEW);
        ClassOrInterfaceType();
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case LANGLE:
          TypeArguments();
          break;
        default:
          mcc_la1[116] = mcc_gen;
          ;
          break;
        }
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case LBRACKET:
          ArrayDimsAndInits();
          break;
        case LPAREN:
          Arguments(null);
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case LBRACE:
            ClassOrInterfaceBody(false, null);
            break;
          default:
            mcc_la1[117] = mcc_gen;
            ;
            break;
          }
          break;
        default:
          mcc_la1[118] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        mcc_la1[119] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  public void ArrayDimsAndInits() {
    if (mcc_2_36(2)) {
      while (true) {
        mcc_consume_token(LBRACKET);
        Expression(null);
        mcc_consume_token(RBRACKET);
        if (mcc_2_34(2)) {
          ;
        } else {
          goto label_41;
        }
      }label_41: ;
      
      while (true) {
        if (mcc_2_35(2)) {
          ;
        } else {
          goto label_42;
        }
        mcc_consume_token(LBRACKET);
        mcc_consume_token(RBRACKET);
      }label_42: ;
      
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LBRACKET:
        while (true) {
          mcc_consume_token(LBRACKET);
          mcc_consume_token(RBRACKET);
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            mcc_la1[120] = mcc_gen;
            goto label_43;
          }
        }label_43: ;
        
        ArrayInitializer();
        break;
      default:
        mcc_la1[121] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * Statement syntax follows.
 */
  public void Statement() {
    if (mcc_2_37(2)) {
      LabeledStatement();
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LBRACE:
        Block(null);
        break;
      case SEMICOLON:
        EmptyStatement();
        break;
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BASE:
      case FALSE:
      case NEW:
      case NULL:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case INCR:
      case DECR:
      case 130:
      case IDENTIFIER:
        StatementExpression();
        mcc_consume_token(SEMICOLON);
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case BREAK:
        BreakStatement();
        break;
      case CONTINUE:
        ContinueStatement();
        break;
      case GOTO:
        GoToStatement();
        break;
      case RETURN:
        ReturnStatement();
        break;
      case THROW:
        ThrowStatement();
        break;
      case LOCK:
        LockStatement();
        break;
      case TRY:
        TryStatement();
        break;
      default:
        mcc_la1[122] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public void LabeledStatement() {
    mcc_consume_token(IDENTIFIER);
    mcc_consume_token(COLON);
    Statement();
  }

  public void Block(IList<Token> tokens) {
          Token first, last;
          if (tokens == null)
            tokens = new List<Token>();
    mcc_consume_token(LBRACE);
          first = GetToken(1);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ABSTRACT:
      case BASE:
      case BOOL:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case EXTERN:
      case FALSE:
      case FLOAT:
      case FOR:
      case GOTO:
      case IF:
      case INT:
      case INTERFACE:
      case INTERNAL:
      case LOCK:
      case LONG:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case READONLY:
      case RETURN:
      case SHORT:
      case STATIC:
      case SWITCH:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOLATILE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case INCR:
      case DECR:
      case 130:
      case IDENTIFIER:
        ;
        break;
      default:
        mcc_la1[123] = mcc_gen;
        goto label_44;
      }
      BlockStatement();
    }label_44: ;
    
          last = GetToken(0);
    mcc_consume_token(RBRACE);
          if (last.next != first) { // i.e., this is not an empty sequence
            Token t = first;
            while (true) {
              tokens.Add(t);
              if (t == last) break;
              t = t.next;
            }
          }
  }

  public void BlockStatement() {
    if (mcc_2_38(2147483647)) {
      LocalVariableDeclaration();
      mcc_consume_token(SEMICOLON);
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BASE:
      case BREAK:
      case CONTINUE:
      case DO:
      case FALSE:
      case FOR:
      case GOTO:
      case IF:
      case LOCK:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case 130:
      case IDENTIFIER:
        Statement();
        break;
      case CLASS:
      case INTERFACE:
        ClassOrInterfaceDeclaration(0, null);
        break;
      default:
        mcc_la1[124] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public void LocalVariableDeclaration() {
    Modifiers();
    Type();
    VariableDeclarator();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[125] = mcc_gen;
        goto label_45;
      }
      mcc_consume_token(COMMA);
      VariableDeclarator();
    }label_45: ;
    
  }

  public void EmptyStatement() {
    mcc_consume_token(SEMICOLON);
  }

  public void StatementExpression() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BASE:
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case 130:
    case IDENTIFIER:
      PrimaryExpression();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case 134:
      case 135:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case INCR:
          mcc_consume_token(INCR);
          break;
        case DECR:
          mcc_consume_token(DECR);
          break;
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case 134:
        case 135:
          AssignmentOperator();
          Expression(null);
          break;
        default:
          mcc_la1[126] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        mcc_la1[127] = mcc_gen;
        ;
        break;
      }
      break;
    default:
      mcc_la1[128] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void SwitchStatement() {
    mcc_consume_token(SWITCH);
    mcc_consume_token(LPAREN);
    Expression(null);
    mcc_consume_token(RPAREN);
    mcc_consume_token(LBRACE);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        mcc_la1[129] = mcc_gen;
        goto label_46;
      }
      SwitchLabel();
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case ABSTRACT:
        case BASE:
        case BOOL:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case EXTERN:
        case FALSE:
        case FLOAT:
        case FOR:
        case GOTO:
        case IF:
        case INT:
        case INTERFACE:
        case INTERNAL:
        case LOCK:
        case LONG:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case READONLY:
        case RETURN:
        case SHORT:
        case STATIC:
        case SWITCH:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOLATILE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case SEMICOLON:
        case INCR:
        case DECR:
        case 130:
        case IDENTIFIER:
          ;
          break;
        default:
          mcc_la1[130] = mcc_gen;
          goto label_47;
        }
        BlockStatement();
      }label_47: ;
      
    }label_46: ;
    
    mcc_consume_token(RBRACE);
  }

  public void SwitchLabel() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case CASE:
      mcc_consume_token(CASE);
      Expression(null);
      mcc_consume_token(COLON);
      break;
    case _DEFAULT:
      mcc_consume_token(_DEFAULT);
      mcc_consume_token(COLON);
      break;
    default:
      mcc_la1[131] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void IfStatement() {
    mcc_consume_token(IF);
    mcc_consume_token(LPAREN);
    Expression(null);
    mcc_consume_token(RPAREN);
    Statement();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ELSE:
      mcc_consume_token(ELSE);
      Statement();
      break;
    default:
      mcc_la1[132] = mcc_gen;
      ;
      break;
    }
  }

  public void WhileStatement() {
    mcc_consume_token(WHILE);
    mcc_consume_token(LPAREN);
    Expression(null);
    mcc_consume_token(RPAREN);
    Statement();
  }

  public void DoStatement() {
    mcc_consume_token(DO);
    Statement();
    mcc_consume_token(WHILE);
    mcc_consume_token(LPAREN);
    Expression(null);
    mcc_consume_token(RPAREN);
    mcc_consume_token(SEMICOLON);
  }

  public void ForStatement() {
    mcc_consume_token(FOR);
    mcc_consume_token(LPAREN);
    if (mcc_2_39(2147483647)) {
      Type();
      mcc_consume_token(IDENTIFIER);
      mcc_consume_token(COLON);
      Expression(null);
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ABSTRACT:
      case BASE:
      case BOOL:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case EXTERN:
      case FALSE:
      case FLOAT:
      case INT:
      case INTERNAL:
      case LONG:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case READONLY:
      case SHORT:
      case STATIC:
      case THIS:
      case TRANSIENT:
      case TRUE:
      case VOLATILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case INCR:
      case DECR:
      case 130:
      case IDENTIFIER:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case ABSTRACT:
        case BASE:
        case BOOL:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case EXTERN:
        case FALSE:
        case FLOAT:
        case INT:
        case INTERNAL:
        case LONG:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case READONLY:
        case SHORT:
        case STATIC:
        case THIS:
        case TRANSIENT:
        case TRUE:
        case VOLATILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACKET:
        case INCR:
        case DECR:
        case 130:
        case IDENTIFIER:
          ForInit();
          break;
        default:
          mcc_la1[133] = mcc_gen;
          ;
          break;
        }
        mcc_consume_token(SEMICOLON);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case BASE:
        case FALSE:
        case NEW:
        case NULL:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case 130:
        case IDENTIFIER:
          Expression(null);
          break;
        default:
          mcc_la1[134] = mcc_gen;
          ;
          break;
        }
        mcc_consume_token(SEMICOLON);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case BASE:
        case FALSE:
        case NEW:
        case NULL:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case INCR:
        case DECR:
        case 130:
        case IDENTIFIER:
          ForUpdate();
          break;
        default:
          mcc_la1[135] = mcc_gen;
          ;
          break;
        }
        break;
      default:
        mcc_la1[136] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    mcc_consume_token(RPAREN);
    Statement();
  }

  public void ForInit() {
    if (mcc_2_40(2147483647)) {
      LocalVariableDeclaration();
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BASE:
      case FALSE:
      case NEW:
      case NULL:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case INCR:
      case DECR:
      case 130:
      case IDENTIFIER:
        StatementExpressionList();
        break;
      default:
        mcc_la1[137] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public void StatementExpressionList() {
    StatementExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[138] = mcc_gen;
        goto label_48;
      }
      mcc_consume_token(COMMA);
      StatementExpression();
    }label_48: ;
    
  }

  public void ForUpdate() {
    StatementExpressionList();
  }

  public void BreakStatement() {
    mcc_consume_token(BREAK);
    mcc_consume_token(SEMICOLON);
  }

  public void ContinueStatement() {
    mcc_consume_token(CONTINUE);
    mcc_consume_token(SEMICOLON);
  }

  public void GoToStatement() {
    mcc_consume_token(GOTO);
    mcc_consume_token(SEMICOLON);
  }

  public void ReturnStatement() {
          Token t;
    t = mcc_consume_token(RETURN);
          // Add if statement to prevent subsequent code generated
          // from being dead code.
          if (inAction) {
            t.image = "{if (true) return";
            jumpPatched = true;
          }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BASE:
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case 130:
    case IDENTIFIER:
      Expression(null);
      break;
    default:
      mcc_la1[139] = mcc_gen;
      ;
      break;
    }
    t = mcc_consume_token(SEMICOLON);
          // Add closing brace for above if statement.
          if (inAction) {
            t.image = ";}";
          }
  }

  public void ThrowStatement() {
          Token t;
    t = mcc_consume_token(THROW);
          // Add if statement to prevent subsequent code generated
          // from being dead code.
          if (inAction) {
            t.image = "{if (true) throw";
            jumpPatched = true;
          }
    Expression(null);
    t = mcc_consume_token(SEMICOLON);
          // Add closing brace for above if statement.
          if (inAction) {
            t.image = ";}";
          }
  }

  public void LockStatement() {
    mcc_consume_token(LOCK);
    mcc_consume_token(LPAREN);
    Expression(null);
    mcc_consume_token(RPAREN);
    Block(null);
  }

  public void TryStatement() {
    mcc_consume_token(TRY);
    Block(null);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case CATCH:
        ;
        break;
      default:
        mcc_la1[140] = mcc_gen;
        goto label_49;
      }
      mcc_consume_token(CATCH);
      mcc_consume_token(LPAREN);
      FormalParameter();
      mcc_consume_token(RPAREN);
      Block(null);
    }label_49: ;
    
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case FINALLY:
      mcc_consume_token(FINALLY);
      Block(null);
      break;
    default:
      mcc_la1[141] = mcc_gen;
      ;
      break;
    }
  }

/* We use productions to match >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  public void RSIGNEDSHIFT() {
    if (GetToken(1).kind == GT &&
                    ((Token.GTToken)GetToken(1)).realKind == CSharpCCParserConstants.RSIGNEDSHIFT) {

    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    mcc_consume_token(RANGLE);
    mcc_consume_token(RANGLE);
  }

/* Annotation syntax follows. */
  public void Annotation() {
    if (mcc_2_41(2147483647)) {
      NormalAnnotation();
    } else if (mcc_2_42(2147483647)) {
      SingleMemberAnnotation();
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void NormalAnnotation() {
    mcc_consume_token(LBRACKET);
    Name(null);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPAREN:
      mcc_consume_token(LPAREN);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case IDENTIFIER:
        MemberValuePairs();
        break;
      default:
        mcc_la1[142] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(RPAREN);
      break;
    default:
      mcc_la1[143] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(RBRACKET);
  }

  public void SingleMemberAnnotation() {
    mcc_consume_token(LBRACKET);
    Name(null);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LPAREN:
      mcc_consume_token(LPAREN);
      MemberValue();
      mcc_consume_token(RPAREN);
      break;
    default:
      mcc_la1[144] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(RBRACKET);
  }

  public void MemberValuePairs() {
    MemberValuePair();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case COMMA:
        ;
        break;
      default:
        mcc_la1[145] = mcc_gen;
        goto label_50;
      }
      mcc_consume_token(COMMA);
      MemberValuePair();
    }label_50: ;
    
  }

  public void MemberValuePair() {
    mcc_consume_token(IDENTIFIER);
    mcc_consume_token(ASSIGN);
    MemberValue();
  }

  public void MemberValue() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LBRACKET:
      Annotation();
      break;
    case LBRACE:
      MemberValueArrayInitializer();
      break;
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BASE:
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case 130:
    case IDENTIFIER:
      ConditionalExpression();
      break;
    default:
      mcc_la1[146] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void MemberValueArrayInitializer() {
    mcc_consume_token(LBRACE);
    MemberValue();
    while (true) {
      if (mcc_2_43(2)) {
        ;
      } else {
        goto label_51;
      }
      mcc_consume_token(COMMA);
      MemberValue();
    }label_51: ;
    
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case COMMA:
      mcc_consume_token(COMMA);
      break;
    default:
      mcc_la1[147] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(RBRACE);
  }

  public void DefaultValue() {
    mcc_consume_token(_DEFAULT);
    MemberValue();
  }

  private bool mcc_2_1(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_1(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(0, xla); }
  }

  private bool mcc_2_2(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_2(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(1, xla); }
  }

  private bool mcc_2_3(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_3(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(2, xla); }
  }

  private bool mcc_2_4(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_4(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(3, xla); }
  }

  private bool mcc_2_5(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_5(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(4, xla); }
  }

  private bool mcc_2_6(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_6(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(5, xla); }
  }

  private bool mcc_2_7(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_7(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(6, xla); }
  }

  private bool mcc_2_8(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_8(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(7, xla); }
  }

  private bool mcc_2_9(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_9(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(8, xla); }
  }

  private bool mcc_2_10(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_10(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(9, xla); }
  }

  private bool mcc_2_11(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_11(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(10, xla); }
  }

  private bool mcc_2_12(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_12(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(11, xla); }
  }

  private bool mcc_2_13(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_13(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(12, xla); }
  }

  private bool mcc_2_14(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_14(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(13, xla); }
  }

  private bool mcc_2_15(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_15(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(14, xla); }
  }

  private bool mcc_2_16(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_16(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(15, xla); }
  }

  private bool mcc_2_17(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_17(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(16, xla); }
  }

  private bool mcc_2_18(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_18(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(17, xla); }
  }

  private bool mcc_2_19(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_19(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(18, xla); }
  }

  private bool mcc_2_20(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_20(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(19, xla); }
  }

  private bool mcc_2_21(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_21(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(20, xla); }
  }

  private bool mcc_2_22(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_22(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(21, xla); }
  }

  private bool mcc_2_23(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_23(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(22, xla); }
  }

  private bool mcc_2_24(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_24(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(23, xla); }
  }

  private bool mcc_2_25(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_25(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(24, xla); }
  }

  private bool mcc_2_26(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_26(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(25, xla); }
  }

  private bool mcc_2_27(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_27(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(26, xla); }
  }

  private bool mcc_2_28(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_28(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(27, xla); }
  }

  private bool mcc_2_29(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_29(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(28, xla); }
  }

  private bool mcc_2_30(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_30(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(29, xla); }
  }

  private bool mcc_2_31(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_31(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(30, xla); }
  }

  private bool mcc_2_32(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_32(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(31, xla); }
  }

  private bool mcc_2_33(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_33(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(32, xla); }
  }

  private bool mcc_2_34(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_34(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(33, xla); }
  }

  private bool mcc_2_35(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_35(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(34, xla); }
  }

  private bool mcc_2_36(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_36(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(35, xla); }
  }

  private bool mcc_2_37(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_37(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(36, xla); }
  }

  private bool mcc_2_38(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_38(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(37, xla); }
  }

  private bool mcc_2_39(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_39(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(38, xla); }
  }

  private bool mcc_2_40(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_40(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(39, xla); }
  }

  private bool mcc_2_41(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_41(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(40, xla); }
  }

  private bool mcc_2_42(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_42(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(41, xla); }
  }

  private bool mcc_2_43(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_43(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(42, xla); }
  }

  private bool mcc_3R_294() {
    if (mcc_3R_145()) return true;
    return false;
  }

  private bool mcc_3R_204() {
    if (mcc_scan_token(IF)) return true;
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_83()) return true;
    if (mcc_scan_token(RPAREN)) return true;
    if (mcc_3R_168()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_286()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_218() {
    if (mcc_3R_224()) return true;
    return false;
  }

  private bool mcc_3R_301() {
    if (mcc_scan_token(_DEFAULT)) return true;
    if (mcc_scan_token(COLON)) return true;
    return false;
  }

  private bool mcc_3R_132() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_131()) return true;
    return false;
  }

  private bool mcc_3R_300() {
    if (mcc_scan_token(CASE)) return true;
    if (mcc_3R_83()) return true;
    if (mcc_scan_token(COLON)) return true;
    return false;
  }

  private bool mcc_3R_293() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_300()) {
    mcc_scanpos = xsp;
    if (mcc_3R_301()) return true;
    }
    return false;
  }

  private bool mcc_3R_280() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_254()) return true;
    return false;
  }

  private bool mcc_3R_198() {
    if (mcc_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_218()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_285() {
    if (mcc_3R_293()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_294()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_276() {
    if (mcc_3R_78()) return true;
    return false;
  }

  private bool mcc_3R_203() {
    if (mcc_scan_token(SWITCH)) return true;
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_83()) return true;
    if (mcc_scan_token(RPAREN)) return true;
    if (mcc_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_285()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_299() {
    if (mcc_3R_82()) return true;
    if (mcc_3R_83()) return true;
    return false;
  }

  private bool mcc_3R_144() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(131)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(132)) return true;
    }
    return false;
  }

  private bool mcc_3R_131() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_144()) mcc_scanpos = xsp;
    if (mcc_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3_9() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_71()) return true;
    return false;
  }

  private bool mcc_3R_292() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(109)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(110)) {
    mcc_scanpos = xsp;
    if (mcc_3R_299()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_101() {
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_131()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_132()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_221() {
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_292()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_71() {
    if (mcc_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_276()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_220() {
    if (mcc_3R_226()) return true;
    return false;
  }

  private bool mcc_3R_202() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_219()) {
    mcc_scanpos = xsp;
    if (mcc_3R_220()) {
    mcc_scanpos = xsp;
    if (mcc_3R_221()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_219() {
    if (mcc_3R_225()) return true;
    return false;
  }

  private bool mcc_3R_262() {
    if (mcc_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_9()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_271() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_136()) return true;
    return false;
  }

  private bool mcc_3R_248() {
    if (mcc_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_262()) mcc_scanpos = xsp;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_247() {
    if (mcc_3R_261()) return true;
    return false;
  }

  private bool mcc_3_38() {
    if (mcc_3R_91()) return true;
    if (mcc_3R_73()) return true;
    if (mcc_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3R_167() {
    if (mcc_3R_91()) return true;
    if (mcc_3R_73()) return true;
    if (mcc_3R_254()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_280()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_239() {
    if (mcc_scan_token(ENUM)) return true;
    if (mcc_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_247()) mcc_scanpos = xsp;
    if (mcc_3R_248()) return true;
    return false;
  }

  private bool mcc_3R_261() {
    if (mcc_scan_token(COLON)) return true;
    if (mcc_3R_136()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_271()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_157() {
    if (mcc_3R_169()) return true;
    return false;
  }

  private bool mcc_3R_156() {
    if (mcc_3R_168()) return true;
    return false;
  }

  private bool mcc_3R_145() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_155()) {
    mcc_scanpos = xsp;
    if (mcc_3R_156()) {
    mcc_scanpos = xsp;
    if (mcc_3R_157()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_155() {
    if (mcc_3R_167()) return true;
    if (mcc_scan_token(SEMICOLON)) return true;
    return false;
  }

  private bool mcc_3R_194() {
    if (mcc_scan_token(INTERFACE)) return true;
    return false;
  }

  private bool mcc_3R_169() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(35)) {
    mcc_scanpos = xsp;
    if (mcc_3R_194()) return true;
    }
    if (mcc_scan_token(IDENTIFIER)) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_245()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_246()) mcc_scanpos = xsp;
    if (mcc_3R_198()) return true;
    return false;
  }

  private bool mcc_3R_246() {
    if (mcc_3R_261()) return true;
    return false;
  }

  private bool mcc_3R_245() {
    if (mcc_3R_101()) return true;
    return false;
  }

  private bool mcc_3R_133() {
    if (mcc_3R_145()) return true;
    return false;
  }

  private bool mcc_3R_103() {
    if (mcc_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_133()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_90() {
    if (mcc_scan_token(IDENTIFIER)) return true;
    if (mcc_scan_token(COLON)) return true;
    if (mcc_3R_168()) return true;
    return false;
  }

  private bool mcc_3_35() {
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_scan_token(RBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_193() {
    if (mcc_3R_214()) return true;
    return false;
  }

  private bool mcc_3R_192() {
    if (mcc_3R_213()) return true;
    return false;
  }

  private bool mcc_3R_191() {
    if (mcc_3R_212()) return true;
    return false;
  }

  private bool mcc_3R_190() {
    if (mcc_3R_211()) return true;
    return false;
  }

  private bool mcc_3R_189() {
    if (mcc_3R_210()) return true;
    return false;
  }

  private bool mcc_3R_188() {
    if (mcc_3R_209()) return true;
    return false;
  }

  private bool mcc_3R_187() {
    if (mcc_3R_208()) return true;
    return false;
  }

  private bool mcc_3R_70() {
    if (mcc_3R_100()) return true;
    return false;
  }

  private bool mcc_3R_186() {
    if (mcc_3R_207()) return true;
    return false;
  }

  private bool mcc_3_1() {
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_scan_token(STAR)) return true;
    return false;
  }

  private bool mcc_3R_69() {
    if (mcc_scan_token(VOLATILE)) return true;
    return false;
  }

  private bool mcc_3R_185() {
    if (mcc_3R_206()) return true;
    return false;
  }

  private bool mcc_3R_68() {
    if (mcc_scan_token(TRANSIENT)) return true;
    return false;
  }

  private bool mcc_3R_64() {
    if (mcc_scan_token(INTERNAL)) return true;
    return false;
  }

  private bool mcc_3R_184() {
    if (mcc_3R_205()) return true;
    return false;
  }

  private bool mcc_3R_67() {
    if (mcc_scan_token(EXTERN)) return true;
    return false;
  }

  private bool mcc_3R_183() {
    if (mcc_3R_204()) return true;
    return false;
  }

  private bool mcc_3R_66() {
    if (mcc_scan_token(ABSTRACT)) return true;
    return false;
  }

  private bool mcc_3R_182() {
    if (mcc_3R_203()) return true;
    return false;
  }

  private bool mcc_3R_65() {
    if (mcc_scan_token(READONLY)) return true;
    return false;
  }

  private bool mcc_3R_181() {
    if (mcc_3R_202()) return true;
    if (mcc_scan_token(SEMICOLON)) return true;
    return false;
  }

  private bool mcc_3R_63() {
    if (mcc_scan_token(PRIVATE)) return true;
    return false;
  }

  private bool mcc_3R_180() {
    if (mcc_3R_103()) return true;
    return false;
  }

  private bool mcc_3R_62() {
    if (mcc_scan_token(PROTECTED)) return true;
    return false;
  }

  private bool mcc_3R_162() {
    if (mcc_3R_80()) return true;
    return false;
  }

  private bool mcc_3R_61() {
    if (mcc_scan_token(STATIC)) return true;
    return false;
  }

  private bool mcc_3_37() {
    if (mcc_3R_90()) return true;
    return false;
  }

  private bool mcc_3R_168() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_37()) {
    mcc_scanpos = xsp;
    if (mcc_3R_180()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(94)) {
    mcc_scanpos = xsp;
    if (mcc_3R_181()) {
    mcc_scanpos = xsp;
    if (mcc_3R_182()) {
    mcc_scanpos = xsp;
    if (mcc_3R_183()) {
    mcc_scanpos = xsp;
    if (mcc_3R_184()) {
    mcc_scanpos = xsp;
    if (mcc_3R_185()) {
    mcc_scanpos = xsp;
    if (mcc_3R_186()) {
    mcc_scanpos = xsp;
    if (mcc_3R_187()) {
    mcc_scanpos = xsp;
    if (mcc_3R_188()) {
    mcc_scanpos = xsp;
    if (mcc_3R_189()) {
    mcc_scanpos = xsp;
    if (mcc_3R_190()) {
    mcc_scanpos = xsp;
    if (mcc_3R_191()) {
    mcc_scanpos = xsp;
    if (mcc_3R_192()) {
    mcc_scanpos = xsp;
    if (mcc_3R_193()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_60() {
    if (mcc_scan_token(PUBLIC)) return true;
    return false;
  }

  private bool mcc_3R_175() {
    if (mcc_3R_198()) return true;
    return false;
  }

  private bool mcc_3_8() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_60()) {
    mcc_scanpos = xsp;
    if (mcc_3R_61()) {
    mcc_scanpos = xsp;
    if (mcc_3R_62()) {
    mcc_scanpos = xsp;
    if (mcc_3R_63()) {
    mcc_scanpos = xsp;
    if (mcc_3R_64()) {
    mcc_scanpos = xsp;
    if (mcc_3R_65()) {
    mcc_scanpos = xsp;
    if (mcc_3R_66()) {
    mcc_scanpos = xsp;
    if (mcc_3R_67()) {
    mcc_scanpos = xsp;
    if (mcc_3R_68()) {
    mcc_scanpos = xsp;
    if (mcc_3R_69()) {
    mcc_scanpos = xsp;
    if (mcc_3R_70()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_91() {
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_8()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_197() {
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_scan_token(RBRACKET)) return true;
    return false;
  }

  private bool mcc_3_34() {
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_3R_83()) return true;
    if (mcc_scan_token(RBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_174() {
    Token xsp;
    if (mcc_3R_197()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_197()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_3R_134()) return true;
    return false;
  }

  private bool mcc_3_36() {
    Token xsp;
    if (mcc_3_34()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_34()) { mcc_scanpos = xsp; break; }
    }
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_35()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_161() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_36()) {
    mcc_scanpos = xsp;
    if (mcc_3R_174()) return true;
    }
    return false;
  }

  private bool mcc_3R_146() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_83()) return true;
    return false;
  }

  private bool mcc_3R_164() {
    if (mcc_3R_78()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_175()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_59() {
    if (mcc_3R_100()) return true;
    return false;
  }

  private bool mcc_3R_163() {
    if (mcc_3R_161()) return true;
    return false;
  }

  private bool mcc_3_7() {
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_59()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(NAMESPACE)) return true;
    return false;
  }

  private bool mcc_3R_119() {
    if (mcc_scan_token(NEW)) return true;
    if (mcc_3R_136()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_162()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_163()) {
    mcc_scanpos = xsp;
    if (mcc_3R_164()) return true;
    }
    return false;
  }

  private bool mcc_3R_88() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_33()) {
    mcc_scanpos = xsp;
    if (mcc_3R_119()) return true;
    }
    return false;
  }

  private bool mcc_3_33() {
    if (mcc_scan_token(NEW)) return true;
    if (mcc_3R_86()) return true;
    if (mcc_3R_161()) return true;
    return false;
  }

  private bool mcc_3R_135() {
    if (mcc_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_146()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_108() {
    if (mcc_3R_135()) return true;
    return false;
  }

  private bool mcc_3R_78() {
    if (mcc_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_108()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPAREN)) return true;
    return false;
  }

  private bool mcc_3R_81() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(137)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(1)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(2)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(3)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(4)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(130)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(6)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(7)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(8)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(9)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(10)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(11)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_96() {
    if (mcc_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private bool mcc_3R_53() {
    if (mcc_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3R_172() {
    if (mcc_scan_token(FALSE)) return true;
    return false;
  }

  private bool mcc_3R_159() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_171()) {
    mcc_scanpos = xsp;
    if (mcc_3R_172()) return true;
    }
    return false;
  }

  private bool mcc_3R_171() {
    if (mcc_scan_token(TRUE)) return true;
    return false;
  }

  private bool mcc_3R_138() {
    if (mcc_3R_140()) return true;
    return false;
  }

  private bool mcc_3R_148() {
    if (mcc_3R_159()) return true;
    return false;
  }

  private bool mcc_3R_199() {
    if (mcc_3R_96()) return true;
    return false;
  }

  private bool mcc_3R_140() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(77)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(81)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(86)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(87)) {
    mcc_scanpos = xsp;
    if (mcc_3R_148()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(58)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_118() {
    if (mcc_3R_78()) return true;
    return false;
  }

  private bool mcc_3R_117() {
    if (mcc_scan_token(DOT)) return true;
    if (mcc_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3R_116() {
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_3R_83()) return true;
    if (mcc_scan_token(RBRACKET)) return true;
    return false;
  }

  private bool mcc_3_32() {
    if (mcc_3R_89()) return true;
    return false;
  }

  private bool mcc_3R_178() {
    if (mcc_3R_199()) return true;
    return false;
  }

  private bool mcc_3R_87() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_31()) {
    mcc_scanpos = xsp;
    if (mcc_3_32()) {
    mcc_scanpos = xsp;
    if (mcc_3R_116()) {
    mcc_scanpos = xsp;
    if (mcc_3R_117()) {
    mcc_scanpos = xsp;
    if (mcc_3R_118()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3_31() {
    if (mcc_scan_token(DOT)) return true;
    if (mcc_3R_88()) return true;
    return false;
  }

  private bool mcc_3R_127() {
    if (mcc_3R_92()) return true;
    return false;
  }

  private bool mcc_3R_126() {
    if (mcc_3R_88()) return true;
    return false;
  }

  private bool mcc_3R_177() {
    if (mcc_scan_token(TILDE)) return true;
    return false;
  }

  private bool mcc_3R_165() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_177()) mcc_scanpos = xsp;
    if (mcc_scan_token(LBRACKET)) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_178()) mcc_scanpos = xsp;
    if (mcc_scan_token(RBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_125() {
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_83()) return true;
    if (mcc_scan_token(RPAREN)) return true;
    return false;
  }

  private bool mcc_3_30() {
    if (mcc_3R_87()) return true;
    return false;
  }

  private bool mcc_3R_124() {
    if (mcc_scan_token(BASE)) return true;
    if (mcc_scan_token(DOT)) return true;
    if (mcc_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3R_123() {
    if (mcc_3R_140()) return true;
    return false;
  }

  private bool mcc_3R_95() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_123()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(67)) {
    mcc_scanpos = xsp;
    if (mcc_3R_124()) {
    mcc_scanpos = xsp;
    if (mcc_3R_125()) {
    mcc_scanpos = xsp;
    if (mcc_3R_126()) {
    mcc_scanpos = xsp;
    if (mcc_3R_127()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_298() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(109)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(110)) return true;
    }
    return false;
  }

  private bool mcc_3R_89() {
    if (mcc_scan_token(DOT)) return true;
    if (mcc_3R_80()) return true;
    if (mcc_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3_29() {
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3R_52() {
    if (mcc_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_30()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_284() {
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_73()) return true;
    if (mcc_scan_token(RPAREN)) return true;
    if (mcc_3R_274()) return true;
    return false;
  }

  private bool mcc_3R_283() {
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_73()) return true;
    if (mcc_scan_token(RPAREN)) return true;
    if (mcc_3R_260()) return true;
    return false;
  }

  private bool mcc_3R_281() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_283()) {
    mcc_scanpos = xsp;
    if (mcc_3R_284()) return true;
    }
    return false;
  }

  private bool mcc_3_28() {
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_73()) return true;
    if (mcc_scan_token(LBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_282() {
    if (mcc_3R_52()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_298()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_115() {
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_73()) return true;
    if (mcc_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(100)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(99)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(88)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(137)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(67)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(28)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(57)) {
    mcc_scanpos = xsp;
    if (mcc_3R_138()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_152() {
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_58()) return true;
    return false;
  }

  private bool mcc_3R_114() {
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_73()) return true;
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_scan_token(RBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_151() {
    if (mcc_3R_165()) return true;
    return false;
  }

  private bool mcc_3R_85() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_27()) {
    mcc_scanpos = xsp;
    if (mcc_3R_114()) {
    mcc_scanpos = xsp;
    if (mcc_3R_115()) return true;
    }
    }
    return false;
  }

  private bool mcc_3_27() {
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3_26() {
    if (mcc_3R_85()) return true;
    return false;
  }

  private bool mcc_3R_150() {
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_53()) return true;
    return false;
  }

  private bool mcc_3R_279() {
    if (mcc_3R_282()) return true;
    return false;
  }

  private bool mcc_3R_141() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_149()) {
    mcc_scanpos = xsp;
    if (mcc_3R_150()) {
    mcc_scanpos = xsp;
    if (mcc_3R_151()) {
    mcc_scanpos = xsp;
    if (mcc_3R_152()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_149() {
    if (mcc_3R_96()) return true;
    return false;
  }

  private bool mcc_3R_278() {
    if (mcc_3R_281()) return true;
    return false;
  }

  private bool mcc_3R_277() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(100)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(99)) return true;
    }
    if (mcc_3R_260()) return true;
    return false;
  }

  private bool mcc_3R_274() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_277()) {
    mcc_scanpos = xsp;
    if (mcc_3R_278()) {
    mcc_scanpos = xsp;
    if (mcc_3R_279()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_226() {
    if (mcc_scan_token(DECR)) return true;
    if (mcc_3R_52()) return true;
    return false;
  }

  private bool mcc_3R_270() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(111)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(112)) return true;
    }
    if (mcc_3R_243()) return true;
    return false;
  }

  private bool mcc_3R_275() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(113)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(114)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(118)) return true;
    }
    }
    if (mcc_3R_260()) return true;
    return false;
  }

  private bool mcc_3_25() {
    if (mcc_3R_84()) return true;
    return false;
  }

  private bool mcc_3R_225() {
    if (mcc_scan_token(INCR)) return true;
    if (mcc_3R_52()) return true;
    return false;
  }

  private bool mcc_3R_269() {
    if (mcc_3R_274()) return true;
    return false;
  }

  private bool mcc_3_24() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(136)) {
    mcc_scanpos = xsp;
    if (mcc_3_25()) return true;
    }
    if (mcc_3R_237()) return true;
    return false;
  }

  private bool mcc_3R_268() {
    if (mcc_3R_226()) return true;
    return false;
  }

  private bool mcc_3R_267() {
    if (mcc_3R_225()) return true;
    return false;
  }

  private bool mcc_3R_266() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(111)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(112)) return true;
    }
    if (mcc_3R_260()) return true;
    return false;
  }

  private bool mcc_3R_128() {
    if (mcc_3R_141()) return true;
    return false;
  }

  private bool mcc_3R_260() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_266()) {
    mcc_scanpos = xsp;
    if (mcc_3R_267()) {
    mcc_scanpos = xsp;
    if (mcc_3R_268()) {
    mcc_scanpos = xsp;
    if (mcc_3R_269()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_98() {
    Token xsp;
    if (mcc_3R_128()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_128()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_244() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(98)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(128)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(104)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(105)) return true;
    }
    }
    }
    if (mcc_3R_230()) return true;
    return false;
  }

  private bool mcc_3R_238() {
    if (mcc_scan_token(IS)) return true;
    if (mcc_3R_73()) return true;
    return false;
  }

  private bool mcc_3R_243() {
    if (mcc_3R_260()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_275()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_237() {
    if (mcc_3R_243()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_270()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_230() {
    if (mcc_3R_237()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_24()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_228() {
    if (mcc_scan_token(BIT_AND)) return true;
    if (mcc_3R_215()) return true;
    return false;
  }

  private bool mcc_3R_231() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(103)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(106)) return true;
    }
    if (mcc_3R_222()) return true;
    return false;
  }

  private bool mcc_3R_227() {
    if (mcc_3R_230()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_244()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_99() {
    if (mcc_scan_token(BIT_OR)) return true;
    return false;
  }

  private bool mcc_3R_216() {
    if (mcc_scan_token(BIT_OR)) return true;
    if (mcc_3R_170()) return true;
    return false;
  }

  private bool mcc_3R_222() {
    if (mcc_3R_227()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_238()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_223() {
    if (mcc_scan_token(XOR)) return true;
    if (mcc_3R_195()) return true;
    return false;
  }

  private bool mcc_3R_58() {
    if (mcc_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_99()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_196() {
    if (mcc_scan_token(SC_AND)) return true;
    if (mcc_3R_158()) return true;
    return false;
  }

  private bool mcc_3R_215() {
    if (mcc_3R_222()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_231()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_173() {
    if (mcc_scan_token(SC_OR)) return true;
    if (mcc_3R_147()) return true;
    return false;
  }

  private bool mcc_3R_195() {
    if (mcc_3R_215()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_228()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_160() {
    if (mcc_scan_token(HOOK)) return true;
    if (mcc_3R_83()) return true;
    if (mcc_scan_token(COLON)) return true;
    if (mcc_3R_83()) return true;
    return false;
  }

  private bool mcc_3R_170() {
    if (mcc_3R_195()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_223()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_6() {
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_53()) return true;
    return false;
  }

  private bool mcc_3R_158() {
    if (mcc_3R_170()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_216()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_147() {
    if (mcc_3R_158()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_196()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_137() {
    if (mcc_3R_147()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_173()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_112() {
    if (mcc_3R_137()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_160()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_97() {
    if (mcc_scan_token(129)) return true;
    return false;
  }

  private bool mcc_3R_57() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_97()) mcc_scanpos = xsp;
    if (mcc_3R_53()) return true;
    if (mcc_scan_token(COLON)) return true;
    return false;
  }

  private bool mcc_3R_82() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(97)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(121)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(122)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(126)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(119)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(120)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(134)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(135)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(123)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(125)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(124)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3_5() {
    if (mcc_scan_token(LANGLE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_57()) mcc_scanpos = xsp;
    if (mcc_3R_58()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3_23() {
    if (mcc_3R_82()) return true;
    if (mcc_3R_83()) return true;
    return false;
  }

  private bool mcc_3R_83() {
    if (mcc_3R_112()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_23()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_3() {
    if (mcc_3R_53()) return true;
    if (mcc_scan_token(LPAREN)) return true;
    return false;
  }

  private bool mcc_3_2() {
    if (mcc_3R_52()) return true;
    if (mcc_scan_token(ASSIGN)) return true;
    return false;
  }

  private bool mcc_3_22() {
    if (mcc_scan_token(DOT)) return true;
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3R_92() {
    if (mcc_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_22()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_56() {
    if (mcc_3R_52()) return true;
    if (mcc_scan_token(ASSIGN)) return true;
    return false;
  }

  private bool mcc_3R_55() {
    if (mcc_3R_96()) return true;
    return false;
  }

  private bool mcc_3_4() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_54()) {
    mcc_scanpos = xsp;
    if (mcc_3R_55()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(98)) {
    mcc_scanpos = xsp;
    if (mcc_3R_56()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_54() {
    if (mcc_3R_53()) return true;
    return false;
  }

  private bool mcc_3R_265() {
    if (mcc_3R_73()) return true;
    return false;
  }

  private bool mcc_3_43() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_94()) return true;
    return false;
  }

  private bool mcc_3R_257() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(74)) {
    mcc_scanpos = xsp;
    if (mcc_3R_265()) return true;
    }
    return false;
  }

  private bool mcc_3_21() {
    if (mcc_3R_80()) return true;
    return false;
  }

  private bool mcc_3R_176() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_111()) return true;
    return false;
  }

  private bool mcc_3R_139() {
    if (mcc_scan_token(LBRACE)) return true;
    if (mcc_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_43()) { mcc_scanpos = xsp; break; }
    }
    xsp = mcc_scanpos;
    if (mcc_scan_token(95)) mcc_scanpos = xsp;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3_18() {
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_scan_token(RBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_201() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_200()) return true;
    return false;
  }

  private bool mcc_3R_86() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(29)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(34)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(31)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(64)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(50)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(55)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(46)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(40)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_122() {
    if (mcc_3R_112()) return true;
    return false;
  }

  private bool mcc_3R_121() {
    if (mcc_3R_139()) return true;
    return false;
  }

  private bool mcc_3R_120() {
    if (mcc_3R_100()) return true;
    return false;
  }

  private bool mcc_3R_94() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_120()) {
    mcc_scanpos = xsp;
    if (mcc_3R_121()) {
    mcc_scanpos = xsp;
    if (mcc_3R_122()) return true;
    }
    }
    return false;
  }

  private bool mcc_3_19() {
    if (mcc_3R_80()) return true;
    return false;
  }

  private bool mcc_3R_166() {
    if (mcc_3R_179()) return true;
    return false;
  }

  private bool mcc_3R_111() {
    if (mcc_3R_79()) return true;
    return false;
  }

  private bool mcc_3R_93() {
    if (mcc_scan_token(IDENTIFIER)) return true;
    if (mcc_scan_token(ASSIGN)) return true;
    return false;
  }

  private bool mcc_3R_154() {
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_94()) return true;
    if (mcc_scan_token(RPAREN)) return true;
    return false;
  }

  private bool mcc_3_17() {
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_scan_token(RBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_200() {
    if (mcc_scan_token(IDENTIFIER)) return true;
    if (mcc_scan_token(ASSIGN)) return true;
    if (mcc_3R_94()) return true;
    return false;
  }

  private bool mcc_3R_153() {
    if (mcc_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_166()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPAREN)) return true;
    return false;
  }

  private bool mcc_3R_80() {
    if (mcc_scan_token(LANGLE)) return true;
    if (mcc_3R_111()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_176()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_179() {
    if (mcc_3R_200()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_201()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_20() {
    if (mcc_scan_token(DOT)) return true;
    if (mcc_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_21()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_136() {
    if (mcc_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_19()) mcc_scanpos = xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_20()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_143() {
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_3R_92()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_154()) mcc_scanpos = xsp;
    if (mcc_scan_token(RBRACKET)) return true;
    return false;
  }

  private bool mcc_3_42() {
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_3R_92()) return true;
    if (mcc_scan_token(LPAREN)) return true;
    return false;
  }

  private bool mcc_3R_110() {
    if (mcc_3R_136()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_18()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_109() {
    if (mcc_3R_86()) return true;
    Token xsp;
    if (mcc_3_17()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_17()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_79() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_109()) {
    mcc_scanpos = xsp;
    if (mcc_3R_110()) return true;
    }
    return false;
  }

  private bool mcc_3_41() {
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_3R_92()) return true;
    if (mcc_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_93()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(89)) return true;
    }
    return false;
  }

  private bool mcc_3R_142() {
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_3R_92()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_153()) mcc_scanpos = xsp;
    if (mcc_scan_token(RBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_102() {
    if (mcc_3R_86()) return true;
    return false;
  }

  private bool mcc_3_16() {
    if (mcc_3R_79()) return true;
    return false;
  }

  private bool mcc_3R_73() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_16()) {
    mcc_scanpos = xsp;
    if (mcc_3R_102()) return true;
    }
    return false;
  }

  private bool mcc_3R_130() {
    if (mcc_3R_143()) return true;
    return false;
  }

  private bool mcc_3R_129() {
    if (mcc_3R_142()) return true;
    return false;
  }

  private bool mcc_3R_113() {
    return false;
  }

  private bool mcc_3R_100() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_129()) {
    mcc_scanpos = xsp;
    if (mcc_3R_130()) return true;
    }
    return false;
  }

  private bool mcc_3_15() {
    if (mcc_scan_token(COLON)) return true;
    if (mcc_scan_token(THIS)) return true;
    if (mcc_3R_78()) return true;
    return false;
  }

  private bool mcc_3R_75() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(65)) mcc_scanpos = xsp;
    if (mcc_3R_103()) return true;
    return false;
  }

  private bool mcc_3_14() {
    if (mcc_3R_77()) return true;
    return false;
  }

  private bool mcc_3R_84() {
    Token xsp;
    xsp = mcc_scanpos;
    lookingAhead = true;
    mcc_semLA = GetToken(1).kind == GT &&
                ((Token.GTToken)GetToken(1)).realKind == CSharpCCParserConstants.RSIGNEDSHIFT;
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_113()) return true;
    if (mcc_scan_token(RANGLE)) return true;
    if (mcc_scan_token(RANGLE)) return true;
    return false;
  }

  private bool mcc_3R_107() {
    if (mcc_scan_token(COLON)) return true;
    if (mcc_scan_token(BASE)) return true;
    if (mcc_3R_78()) return true;
    return false;
  }

  private bool mcc_3R_106() {
    if (mcc_scan_token(COLON)) return true;
    if (mcc_scan_token(THIS)) return true;
    if (mcc_3R_78()) return true;
    return false;
  }

  private bool mcc_3R_77() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_106()) {
    mcc_scanpos = xsp;
    if (mcc_3R_107()) return true;
    }
    return false;
  }

  private bool mcc_3R_291() {
    if (mcc_scan_token(FINALLY)) return true;
    if (mcc_3R_103()) return true;
    return false;
  }

  private bool mcc_3R_252() {
    if (mcc_3R_145()) return true;
    return false;
  }

  private bool mcc_3R_290() {
    if (mcc_scan_token(CATCH)) return true;
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_272()) return true;
    if (mcc_scan_token(RPAREN)) return true;
    if (mcc_3R_103()) return true;
    return false;
  }

  private bool mcc_3R_251() {
    if (mcc_3R_77()) return true;
    return false;
  }

  private bool mcc_3R_214() {
    if (mcc_scan_token(TRY)) return true;
    if (mcc_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_290()) { mcc_scanpos = xsp; break; }
    }
    xsp = mcc_scanpos;
    if (mcc_3R_291()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_249() {
    if (mcc_3R_101()) return true;
    return false;
  }

  private bool mcc_3R_240() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_249()) mcc_scanpos = xsp;
    if (mcc_scan_token(IDENTIFIER)) return true;
    if (mcc_3R_250()) return true;
    if (mcc_scan_token(LBRACE)) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_251()) mcc_scanpos = xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_252()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_273() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_272()) return true;
    return false;
  }

  private bool mcc_3R_213() {
    if (mcc_scan_token(LOCK)) return true;
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_83()) return true;
    if (mcc_scan_token(RPAREN)) return true;
    if (mcc_3R_103()) return true;
    return false;
  }

  private bool mcc_3R_272() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(133)) mcc_scanpos = xsp;
    if (mcc_3R_73()) return true;
    if (mcc_scan_token(137)) return true;
    return false;
  }

  private bool mcc_3R_263() {
    if (mcc_3R_272()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_273()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_212() {
    if (mcc_scan_token(THROW)) return true;
    if (mcc_3R_83()) return true;
    if (mcc_scan_token(SEMICOLON)) return true;
    return false;
  }

  private bool mcc_3_13() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_76()) return true;
    return false;
  }

  private bool mcc_3R_250() {
    if (mcc_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_263()) mcc_scanpos = xsp;
    if (mcc_scan_token(RPAREN)) return true;
    return false;
  }

  private bool mcc_3R_289() {
    if (mcc_3R_83()) return true;
    return false;
  }

  private bool mcc_3R_255() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_254()) return true;
    return false;
  }

  private bool mcc_3R_258() {
    if (mcc_scan_token(IDENTIFIER)) return true;
    if (mcc_3R_250()) return true;
    return false;
  }

  private bool mcc_3R_259() {
    if (mcc_3R_103()) return true;
    return false;
  }

  private bool mcc_3R_256() {
    if (mcc_3R_101()) return true;
    return false;
  }

  private bool mcc_3R_242() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_256()) mcc_scanpos = xsp;
    if (mcc_3R_257()) return true;
    if (mcc_3R_258()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_259()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(94)) return true;
    }
    return false;
  }

  private bool mcc_3R_211() {
    if (mcc_scan_token(RETURN)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_289()) mcc_scanpos = xsp;
    if (mcc_scan_token(SEMICOLON)) return true;
    return false;
  }

  private bool mcc_3R_217() {
    if (mcc_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_13()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_297() {
    if (mcc_3R_303()) return true;
    return false;
  }

  private bool mcc_3R_264() {
    if (mcc_scan_token(ASSIGN)) return true;
    if (mcc_3R_76()) return true;
    return false;
  }

  private bool mcc_3R_210() {
    if (mcc_scan_token(GOTO)) return true;
    if (mcc_scan_token(SEMICOLON)) return true;
    return false;
  }

  private bool mcc_3R_134() {
    if (mcc_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_217()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(95)) mcc_scanpos = xsp;
    if (mcc_scan_token(RBRACE)) return true;
    return false;
  }

  private bool mcc_3R_307() {
    if (mcc_scan_token(COMMA)) return true;
    if (mcc_3R_202()) return true;
    return false;
  }

  private bool mcc_3R_105() {
    if (mcc_3R_83()) return true;
    return false;
  }

  private bool mcc_3R_209() {
    if (mcc_scan_token(CONTINUE)) return true;
    if (mcc_scan_token(SEMICOLON)) return true;
    return false;
  }

  private bool mcc_3R_104() {
    if (mcc_3R_134()) return true;
    return false;
  }

  private bool mcc_3R_76() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_104()) {
    mcc_scanpos = xsp;
    if (mcc_3R_105()) return true;
    }
    return false;
  }

  private bool mcc_3R_208() {
    if (mcc_scan_token(BREAK)) return true;
    if (mcc_scan_token(SEMICOLON)) return true;
    return false;
  }

  private bool mcc_3R_74() {
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_scan_token(RBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_253() {
    if (mcc_scan_token(LBRACKET)) return true;
    if (mcc_scan_token(RBRACKET)) return true;
    return false;
  }

  private bool mcc_3R_303() {
    if (mcc_3R_306()) return true;
    return false;
  }

  private bool mcc_3R_296() {
    if (mcc_3R_83()) return true;
    return false;
  }

  private bool mcc_3R_254() {
    if (mcc_scan_token(137)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_264()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_286() {
    if (mcc_scan_token(ELSE)) return true;
    if (mcc_3R_168()) return true;
    return false;
  }

  private bool mcc_3_40() {
    if (mcc_3R_73()) return true;
    if (mcc_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3_11() {
    if (mcc_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_74()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(IDENTIFIER)) return true;
    xsp = mcc_scanpos;
    if (mcc_scan_token(95)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(97)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(94)) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_306() {
    if (mcc_3R_202()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_307()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_72() {
    if (mcc_3R_101()) return true;
    return false;
  }

  private bool mcc_3R_241() {
    if (mcc_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_253()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_3R_254()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_255()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(SEMICOLON)) return true;
    return false;
  }

  private bool mcc_3_10() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_72()) mcc_scanpos = xsp;
    if (mcc_scan_token(IDENTIFIER)) return true;
    if (mcc_scan_token(LPAREN)) return true;
    return false;
  }

  private bool mcc_3R_305() {
    if (mcc_3R_306()) return true;
    return false;
  }

  private bool mcc_3R_236() {
    if (mcc_3R_242()) return true;
    return false;
  }

  private bool mcc_3_39() {
    if (mcc_3R_73()) return true;
    if (mcc_scan_token(IDENTIFIER)) return true;
    if (mcc_scan_token(COLON)) return true;
    return false;
  }

  private bool mcc_3R_304() {
    if (mcc_3R_167()) return true;
    return false;
  }

  private bool mcc_3R_302() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_304()) {
    mcc_scanpos = xsp;
    if (mcc_3R_305()) return true;
    }
    return false;
  }

  private bool mcc_3R_235() {
    if (mcc_3R_241()) return true;
    return false;
  }

  private bool mcc_3R_295() {
    if (mcc_3R_302()) return true;
    return false;
  }

  private bool mcc_3R_234() {
    if (mcc_3R_240()) return true;
    return false;
  }

  private bool mcc_3R_288() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_295()) mcc_scanpos = xsp;
    if (mcc_scan_token(SEMICOLON)) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_296()) mcc_scanpos = xsp;
    if (mcc_scan_token(SEMICOLON)) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_297()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_233() {
    if (mcc_3R_239()) return true;
    return false;
  }

  private bool mcc_3R_287() {
    if (mcc_3R_73()) return true;
    if (mcc_scan_token(IDENTIFIER)) return true;
    if (mcc_scan_token(COLON)) return true;
    if (mcc_3R_83()) return true;
    return false;
  }

  private bool mcc_3R_232() {
    if (mcc_3R_169()) return true;
    return false;
  }

  private bool mcc_3R_229() {
    if (mcc_3R_91()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_232()) {
    mcc_scanpos = xsp;
    if (mcc_3R_233()) {
    mcc_scanpos = xsp;
    if (mcc_3R_234()) {
    mcc_scanpos = xsp;
    if (mcc_3R_235()) {
    mcc_scanpos = xsp;
    if (mcc_3R_236()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_207() {
    if (mcc_scan_token(FOR)) return true;
    if (mcc_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_287()) {
    mcc_scanpos = xsp;
    if (mcc_3R_288()) return true;
    }
    if (mcc_scan_token(RPAREN)) return true;
    if (mcc_3R_168()) return true;
    return false;
  }

  private bool mcc_3R_206() {
    if (mcc_scan_token(DO)) return true;
    if (mcc_3R_168()) return true;
    if (mcc_scan_token(WHILE)) return true;
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_83()) return true;
    if (mcc_scan_token(RPAREN)) return true;
    if (mcc_scan_token(SEMICOLON)) return true;
    return false;
  }

  private bool mcc_3_12() {
    if (mcc_3R_75()) return true;
    return false;
  }

  private bool mcc_3R_224() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_12()) {
    mcc_scanpos = xsp;
    if (mcc_3R_229()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(94)) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_205() {
    if (mcc_scan_token(WHILE)) return true;
    if (mcc_scan_token(LPAREN)) return true;
    if (mcc_3R_83()) return true;
    if (mcc_scan_token(RPAREN)) return true;
    if (mcc_3R_168()) return true;
    return false;
  }

  public CSharpCCParserTokenManager token_source;
  CSharpCharStream mcc_input_stream;
  public Token token, mcc_nt;
  private int mcc_ntk;
  private Token mcc_scanpos, mcc_lastpos;
  private int mcc_la;
  public bool lookingAhead = false;
  private bool mcc_semLA;
  private int mcc_gen;
  private int[] mcc_la1 = new int[148];
  static private int[] mcc_la1_0;
  static private int[] mcc_la1_1;
  static private int[] mcc_la1_2;
  static private int[] mcc_la1_3;
  static private int[] mcc_la1_4;
  static CSharpCCParser() {
      mcc_gla1_0();
      mcc_gla1_1();
      mcc_gla1_2();
      mcc_gla1_3();
      mcc_gla1_4();
   }
   private static void mcc_gla1_0() {
      mcc_la1_0 = new int[] {-1610610720,6,6,0,-1610610720,0,0,0,0,0,0,0,960,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4062,0,134217728,0,134217728,0,134217728,0,0,0,0,0,0,0,0,0,0,-1476395008,0,-1610612736,-1476395008,0,0,0,268439518,268439518,0,0,0,0,-1610612736,0,0,-134213666,0,0,-1610612736,-1610612736,0,-1610612736,-1610612736,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,268439518,0,0,268439518,268435456,0,0,0,0,268439518,0,0,0,268439518,0,0,0,0,0,0,0,1342181342,-134213666,1342181342,0,0,0,268439518,0,-134213666,0,0,-1207955490,268439518,268439518,-1207955490,268439518,0,268439518,0,0,0,0,0,0,268439518,0,};
   }
   private static void mcc_gla1_1() {
      mcc_la1_1 = new int[] {949240068,0,0,4096,949240068,940572672,940572672,0,0,0,0,0,0,0,0,0,0,0,2,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2014841864,0,2014316544,525320,2014841864,524296,0,0,0,0,0,0,0,0,0,2023509260,525320,8667396,2023509260,0,0,0,100667392,100667392,0,0,0,0,8667396,0,0,-18884180,0,0,8667396,8667396,0,8667396,8667396,0,0,0,0,0,0,0,0,0,0,2097152,0,0,0,0,0,0,0,0,100667392,0,0,100667392,100667392,0,0,0,0,100667392,0,67112960,4096,100667392,0,0,0,0,33554432,0,0,-2042392416,-18884180,-2041868120,0,0,0,100667392,65,-18884180,65,512,2123651332,100667392,100667392,2123651332,100667392,0,100667392,2,8192,0,0,0,0,100667392,0,};
   }
   private static void mcc_gla1_2() {
      mcc_la1_2 = new int[] {1025,2,2,8396864,1025,0,0,-2147483648,0,0,268435456,0,0,67108864,0,0,0,8192,0,0,0,8388608,0,0,335544448,16777216,0,0,8388608,0,0,293601280,8192,-2147483648,67108864,67108864,293601280,0,-2147483648,8388608,0,0,256,1342179362,0,268437538,0,1342179362,0,0,0,-2147483648,0,0,16777216,-2147483648,0,0,1409289251,0,1025,1342180387,268435456,-2147483648,0,96608328,96608328,-2147483648,0,1140850688,-2147483648,1,0,0,1438791935,0,2,1,1,-2147483648,1,1025,-2147483648,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29499464,0,0,29499464,29499464,16777216,0,0,16777216,29499464,285212672,12722240,64,29499464,-2147483648,0,67108864,285212672,0,268435456,268435456,1170354396,1438791935,1170354396,-2147483648,0,0,29499464,0,1438791935,0,0,297937003,29499464,29499464,1371678827,29499464,-2147483648,29499464,0,0,0,16777216,16777216,-2147483648,365043784,-2147483648,};
   }
   private static void mcc_gla1_3() {
      mcc_la1_3 = new int[] {4,0,0,0,4,0,0,0,4,4,0,1048576,0,0,64,1048576,0,0,0,0,1,4,163872,163872,0,0,0,0,0,4,1048576,20,0,0,163872,163872,20,16,0,0,65536,0,0,0,2,0,0,0,0,4,64,0,64,0,0,0,0,0,4,0,4,4,0,0,2,122904,122904,0,4,0,0,0,0,4,24576,64,0,0,0,0,0,0,0,2139095042,32,2048,4096,1048576,2097152,524288,1152,1152,0,772,772,0,98304,98304,4587520,4587520,98304,122904,24,24,0,24,0,24576,24576,0,0,1,0,0,122904,0,4,0,0,0,0,0,24576,24576,24576,0,2139119618,2139119618,24576,0,24576,0,0,24576,122904,24576,24576,24576,0,122904,0,0,0,0,0,0,122904,0,};
   }
   private static void mcc_gla1_4() {
      mcc_la1_4 = new int[] {512,512,512,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,514,0,0,0,0,0,0,0,0,0,0,0,0,0,516,0,0,0,0,0,0,0,0,0,0,0,512,0,0,24,24,512,0,512,512,0,0,0,516,516,0,0,0,0,544,32,0,516,0,0,0,512,0,0,512,0,192,0,0,0,0,0,0,0,0,0,1,1,256,0,0,0,0,0,516,0,0,516,512,0,0,0,0,516,0,0,0,516,0,0,0,0,0,0,0,516,516,516,0,192,192,516,0,516,0,0,516,516,516,516,516,0,516,0,0,512,0,0,0,516,0,};
   }
  private MccCalls[] mcc_2_rtns = new MccCalls[43];
  private bool mcc_rescan = false;
  private int mcc_gc = 0;

  public CSharpCCParser(System.IO.Stream stream) {
    mcc_input_stream = new CSharpCharStream(stream, 1, 1);
    token_source = new CSharpCCParserTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 148; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.Stream stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 148; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public CSharpCCParser(System.IO.TextReader stream) {
    mcc_input_stream = new CSharpCharStream(stream, 1, 1);
    token_source = new CSharpCCParserTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 148; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.TextReader stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 148; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public CSharpCCParser(CSharpCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 148; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(CSharpCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 148; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

   private Token mcc_consume_token(int kind) {
    Token oldToken = null;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    if (token.kind == kind) {
      mcc_gen++;
      if (++mcc_gc > 100) {
        mcc_gc = 0;
        for (int i = 0; i < mcc_2_rtns.Length; i++) {
          MccCalls c = mcc_2_rtns[i];
          while (c != null) {
            if (c.gen < mcc_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    mcc_kind = kind;
    throw GenerateParseException();
  }

  private class LookaheadSuccess : System.Exception { }
  private LookaheadSuccess mcc_ls = new LookaheadSuccess();
  private bool mcc_scan_token(int kind) {
    if (mcc_scanpos == mcc_lastpos) {
      mcc_la--;
      if (mcc_scanpos.next == null) {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next = token_source.GetNextToken();
      } else {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next;
      }
    } else {
      mcc_scanpos = mcc_scanpos.next;
    }
    if (mcc_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != mcc_scanpos) { i++; tok = tok.next; }
      if (tok != null) mcc_add_error_token(kind, i);
    }
    if (mcc_scanpos.kind != kind) return true;
    if (mcc_la == 0 && mcc_scanpos == mcc_lastpos) throw mcc_ls;
    return false;
  }

  public Token GetNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    mcc_gen++;
    return token;
  }

  public Token GetToken(int index) {
    Token t = lookingAhead ? mcc_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.GetNextToken();
    }
    return t;
  }

  private int mcc_mntk() {
    if ((mcc_nt=token.next) == null)
      return (mcc_ntk = (token.next=token_source.GetNextToken()).kind);
    else
      return (mcc_ntk = mcc_nt.kind);
  }

  private System.Collections.ArrayList mcc_expentries = new System.Collections.ArrayList();
  private int[] mcc_expentry;
  private int mcc_kind = -1;
  private int[] mcc_lasttokens = new int[100];
  private int mcc_endpos;

  private void mcc_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == mcc_endpos + 1) {
      mcc_lasttokens[mcc_endpos++] = kind;
    } else if (mcc_endpos != 0) {
      mcc_expentry = new int[mcc_endpos];
      for (int i = 0; i < mcc_endpos; i++) {
        mcc_expentry[i] = mcc_lasttokens[i];
      }
      bool exists = false;
      for (System.Collections.IEnumerator e = mcc_expentries.GetEnumerator(); e.MoveNext();) {
        int[] oldentry = (int[])e.Current;
        if (oldentry.Length == mcc_expentry.Length) {
          exists = true;
          for (int i = 0; i < mcc_expentry.Length; i++) {
            if (oldentry[i] != mcc_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) mcc_expentries.Add(mcc_expentry);
      if (pos != 0) mcc_lasttokens[(mcc_endpos = pos) - 1] = kind;
    }
  }

  public ParseException GenerateParseException() {
    mcc_expentries.Clear();
    bool[] la1tokens = new bool[140];
    for (int i = 0; i < 140; i++) {
      la1tokens[i] = false;
    }
    if (mcc_kind >= 0) {
      la1tokens[mcc_kind] = true;
      mcc_kind = -1;
    }
    for (int i = 0; i < 148; i++) {
      if (mcc_la1[i] == mcc_gen) {
        for (int j = 0; j < 32; j++) {
          if ((mcc_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((mcc_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((mcc_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((mcc_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((mcc_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 140; i++) {
      if (la1tokens[i]) {
        mcc_expentry = new int[1];
        mcc_expentry[0] = i;
        mcc_expentries.Add(mcc_expentry);
      }
    }
    mcc_endpos = 0;
    mcc_rescan_token();
    mcc_add_error_token(0, 0);
    int[][] exptokseq = new int[mcc_expentries.Count][];
    for (int i = 0; i < mcc_expentries.Count; i++) {
      exptokseq[i] = (int[])mcc_expentries[i];
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  public void enable_tracing() {
  }

  public void disable_tracing() {
  }

  private void mcc_rescan_token() {
    mcc_rescan = true;
    for (int i = 0; i < 43; i++) {
      MccCalls p = mcc_2_rtns[i];
      do {
        if (p.gen > mcc_gen) {
          mcc_la = p.arg; mcc_lastpos = mcc_scanpos = p.first;
          switch (i) {
            case 0: mcc_3_1(); break;
            case 1: mcc_3_2(); break;
            case 2: mcc_3_3(); break;
            case 3: mcc_3_4(); break;
            case 4: mcc_3_5(); break;
            case 5: mcc_3_6(); break;
            case 6: mcc_3_7(); break;
            case 7: mcc_3_8(); break;
            case 8: mcc_3_9(); break;
            case 9: mcc_3_10(); break;
            case 10: mcc_3_11(); break;
            case 11: mcc_3_12(); break;
            case 12: mcc_3_13(); break;
            case 13: mcc_3_14(); break;
            case 14: mcc_3_15(); break;
            case 15: mcc_3_16(); break;
            case 16: mcc_3_17(); break;
            case 17: mcc_3_18(); break;
            case 18: mcc_3_19(); break;
            case 19: mcc_3_20(); break;
            case 20: mcc_3_21(); break;
            case 21: mcc_3_22(); break;
            case 22: mcc_3_23(); break;
            case 23: mcc_3_24(); break;
            case 24: mcc_3_25(); break;
            case 25: mcc_3_26(); break;
            case 26: mcc_3_27(); break;
            case 27: mcc_3_28(); break;
            case 28: mcc_3_29(); break;
            case 29: mcc_3_30(); break;
            case 30: mcc_3_31(); break;
            case 31: mcc_3_32(); break;
            case 32: mcc_3_33(); break;
            case 33: mcc_3_34(); break;
            case 34: mcc_3_35(); break;
            case 35: mcc_3_36(); break;
            case 36: mcc_3_37(); break;
            case 37: mcc_3_38(); break;
            case 38: mcc_3_39(); break;
            case 39: mcc_3_40(); break;
            case 40: mcc_3_41(); break;
            case 41: mcc_3_42(); break;
            case 42: mcc_3_43(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    mcc_rescan = false;
  }

  private void mcc_save(int index, int xla) {
    MccCalls p = mcc_2_rtns[index];
    while (p.gen > mcc_gen) {
      if (p.next == null) { p = p.next = new MccCalls(); break; }
      p = p.next;
    }
    p.gen = mcc_gen + xla - mcc_la; p.first = token; p.arg = xla;
  }

  class MccCalls {
    public int gen;
    public Token first;
    public int arg;
    public MccCalls next;
  }

}
}
