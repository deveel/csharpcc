/// <summary>
/// This interface describes a character stream that maintains line and
/// column number positions of the characters.
/// </summary>
/// <remarks>
/// It also has the capability to backup the stream to some extent. An 
/// implementation of this interface is used in the <see cref="ITokenManager"/> 
/// implementation generated by CSharpCCParser.
/// <para>
/// All the methods except backup can be implemented in any fashion. backup
/// needs to be implemented correctly for the correct operation of the lexer.
/// Rest of the methods are all used to get information like line number,
/// column number and the String that constitutes a token and are not used
/// by the lexer. Hence their implementation won't affect the generated lexer's
/// operation.
/// </para>
/// </remarks>
#if SUPPORT_CLASS_VISIBILITY_PUBLIC
public
#fi
interface ICharStream {
	/// <summary>
	/// Reads the next character from the stream.
	/// </summay>
	/// <returns>
	/// </returns>
	/// <throws cref="System.IO.IOException"/>
	char ReadChar();

#if GENERATE_ATTRIBUTES
	[Obsolete]
#fi
	/// <summary>
	/// Returns the column position of the character last read.
	/// </summary>
	/// <seealso cref="EndColumn" />
	int Column { get; }

#if GENERATE_ATTRIBUTES
	[Obsolete]
#fi
	/// <summary>
	/// Returns the line number of the character last read.
	/// </summary>
	/// <seealso cref="EndLine" />
	int Line { get; }
	
	/// <summary>
	/// Returns the column number of the last character for current token (being
	/// matched after the last call to <see cref="BeginTOken"/>).
	/// </summary>
	int EndColumn { get; }
	
	/// <summary>
	/// Returns the line number of the last character for current token (being 
	/// matched after the last call to <see cref="BeginTOken"/>).
	/// </summary>
	int EndLine { get; }
	
	/// <summary>
	/// Returns the column number of the first character for current token (being
	/// matched after the last call to <see cref="BeginTOken"/>).
	/// </summary>
	int BeginColumn { get; }
	
	/// <summary>
	/// Returns the line number of the first character for current token (being 
	/// matched after the last call to <see cref="BeginTOken"/>).
	/// </summary>
	int BeginLine { get;}
	
	/// <summary>
	/// Backs up the input stream by amount steps.
	/// </summary>
	/// <remarks>
	/// Lexer calls this method if it had already read some characters, but could 
	/// not use them to match a (longer) token. So, they will be used again as the 
	/// prefix of the next token and it is the implemetation's responsibility to do 
	/// this right.
	/// </remarks>
	void Backup(int amount);
	
	/// <summary>
	/// Reads the next character that marks the beginning of the next token.
	/// </summary>
	/// <remarks>
	/// All characters must remain in the buffer between two successive calls
	/// to this method to implement backup correctly.
	/// </remarks>
	/// <returns>
	/// Returns a <see cref="char"/> that is the next character that marks the beginning of 
	/// the next token.
	/// </returns>
	/// <throws cref="System.IO.IOException"/>
	char BeginToken();
	
	/// <summary>
	/// Gets the image of the current token from the stream.
	/// </summary>
	/// <remarks>
	/// Implementations have the choice of returning anything that they want to. 
	/// For example, for efficiency, one might decide to just return null, which is 
	/// a valid implementation.
	/// </remarks>
	/// <returns>
	/// Returns a string made up of characters from the marked token beginning to the 
	/// current buffer position.
	/// </returns>
	string GetImage();
	
	/// <summary>
	/// Gets the suffix of the given length for the current token.
	/// </summary>
	/// <param name="len">The desired length of the suffix to return.</param>
	/// <remarks>
	/// This is used to build up the matched string for use in actions in the case of MORE.
	/// </remarks>
	/// <example>
	/// A simple and inefficient implementation of this is as follows:
	/// <code>
	/// string t = GetImage();
	/// return t.Substring(t.Length - len, len).ToCharArray();
	/// </code>
	/// </example>
	/// <returns>
	/// Returns an array of characters that make up the suffix of <paramref name="len">length</paramref>
	/// for the currently matched token.
	/// </returns>
	char[] GetSuffix(int len);
	
	/// <summary>
	/// Called by the lexer to indicate that the stream is done.
	/// </summary>
	/// <remarks>
	/// The lexer calls this function to indicate that it is done with the stream
	/// and hence implementations can free any resources held by this class.
	/// Again, the body of this function can be just empty and it will not affect
	/// the lexer's operation.
	/// </remarks>
	void Done();
}
