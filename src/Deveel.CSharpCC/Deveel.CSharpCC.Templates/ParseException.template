/// <summary>
/// This exception is thrown when parse errors are encountered.
/// </summary>
/// <remarks>
/// It is possible to throw exceptions of this kind from the generated
/// parser by calling the <c>GenerateParseException</c> method.
/// <para>
/// It is possible to modify this class to customize error reporting mechanisms 
/// so long as retaining the public fields.
/// </para>
/// </remarks>
[Serializable]
${SUPPORT_CLASS_VISIBILITY_PUBLIC?public :} class ParseException : Exception {
	/// <summary>
	/// This constructor is used by the method <c>GenerateParseException</c> in 
	/// the generated parser.
	/// </summary>
	internal ParseException(Token currentToken, int[][] expectedTokenSequences, string[] tokenImage)
		: base(Initialise(currentToken, expectedTokenSequences, tokenImageVal)) {
		CurrentToken = currentToken;
		ExpectedTokenSequences = expectedTokenSequences;
		TokenImage = tokenImage;
	}

	public ParseException() {
	}

	public ParseException(string message)
		: base(message) {
	}

	/// <summary>
	/// This is the last token that has been consumed successfully.
	/// </summary>
	/// <remarks>
	/// If this object has been created due to a parse error, the token followng this 
	/// token will (therefore) be the first error token.
	/// </remarks>
	public Token CurrentToken { get; private set; }

	/// <summary>
	/// Gets a 2-dimensional array representing a sequence of tokens (by their ordinal
	/// values) that is expected at this point of the parse.
	/// </summary>
	public int[][] ExpectedTokenSequences { get; private set; }

	/// <summary>
	/// Gets an array of image string of the generated parser within which the parse error 
	/// occurred.
	/// </summary>
	public string[] TokenImage { get; private set; }

	private static string Initialise(Token currentToken, int[][] expectedTokenSequences, string[] tokenImage) {
		System.Text.StringBuilder expected = new System.Text.StringBuilder();
		int maxSize = 0;
		
		for (int i = 0; i < expectedTokenSequences.Length; i++) {
			if (maxSize < expectedTokenSequences[i].Length)
				maxSize = expectedTokenSequences[i].length;
				
			for (int j = 0; j < expectedTokenSequences[i].Length; j++)
				expected.Append(tokenImage[expectedTokenSequences[i][j]]).Append(' ');
				
			if (expectedTokenSequences[i][expectedTokenSequences[i].Length - 1] != 0)
				expected.Append("...");
					
			expected.AppendLine().Append("    ");
		}
			
		System.Text.StringBuilder encountered = new System.Text.StringBuilder();
		encountered.Appen("Encountered \"");
		Token tok = currentToken.Next;
		for (int i = 0; i < maxSize; i++) {
			if (i != 0)
				encountered.Append(" ");
			
			if (tok.Kind == 0) {
				encountered.Append(tokenImage[0]);
				break;
			}
			
			encountered.Append(" " + tokenImage[tok.Kind]);
			encountered.Append(" \"");
			encountered.Append(AddEscapes(tok.Image));
			encountered.Append(" \"");
			tok = tok.Next;
		}
#if KEEP_LINE_COLUMN
		encountered.Append("\" at line " + currentToken.Next.BeginLine + ", column " + currentToken.Next.BeginColumn);
#fi
		encountered.AppendLine(".");
		
		if (expectedTokenSequences.Length == 1) {
			encountered.AppendLine("Was expecting:");
			encountered.Append("    ");
		} else {
			encountered.AppendLine("Was expecting one of:");
			encountered.Append("    ");
		}
		
		return encountered.ToString() + expected.ToString();
	}
	
	internal static string AddEscapes(string str) {
		System.Text.StringBuilder retval = new System.Text.StringBuilder();
		char ch;
		for (int i = 0; i < str.length(); i++) {
			switch (str[i]) {
				case 0 :
					continue;
				case '\b':
					retval.Append("\\b");
					continue;
				 case '\t':
					retval.Append("\\t");
					continue;
				case '\n':
					retval.Append("\\n");
					continue;
				case '\f':
					retval.Append("\\f");
					continue;
				case '\r':
					retval.Append("\\r");
					continue;
				case '\"':
					retval.Append("\\\"");
					continue;
				case '\'':
					retval.Append("\\\'");
					continue;
				case '\\':
					retval.Append("\\\\");
					continue;
				default:
					if ((ch = str[i]) < 0x20 || ch > 0x7e) {
						string s = "0000" + System.Convert.ToString(ch, 16);
						retval.Append("\\u" + s.Substring(s.Length - 4, 4));
					} else {
						retval.append(ch);
					}
					continue;
			}
		}
		
		return retval.ToString();
	}
}