[Serializable]
${SUPPORT_CLASS_VISIBILITY_PUBLIC?public :}class TokenManagerError : System.InvalidOperationException {
	public TokenManagerError() {
	}

	public TokenManagerError(string message, int errorCode)
		: base(message) {
		ErrorCode = errorCode;
	}

	internal TokenManagerError(bool EOFSeen, int lexState, int errorLine, int errorColumn, string errorAfter, char curChar, int reason)
		: this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason){
	}

	/// <summary>
	/// Lexical error occurred.
	/// </summary>
	internal const int LEXICAL_ERROR = 0;

	/// <summary>
	///  An attempt was made to create a second instance of a static token manager.
	/// </summary>
	internal const int STATIC_LEXER_ERROR = 1;

	/// <summary>
	/// Tried to change to an invalid lexical state.
	/// </summary>
	internal const int INVALID_LEXICAL_STATE = 2;

	/// <summary>
	/// Detected (and bailed out of) an infinite loop in the token manager.
	/// </summary>
	internal const int LOOP_DETECTED = 3;

	public int ErrorCode { get; private set; }

	internal static string LexicalError(bool EOFSeen, int lexState, int errorLine, int errorColumn, string errorAfter, char curChar) {
		return("Lexical error at line " + errorLine + ", column " + errorColumn + ".  Encountered: " +
			(EOFSeen ? "<EOF> " : ("\"" + AddEscapes(curChar.ToString()) + "\"") + " (" + (int)curChar + "), ") +
			"after : \"" + AddEscapes(errorAfter) + "\"");
	}

	internal static string AddEscapes(string str) {
		System.Text.StringBuilder retval = new System.Text.StringBuilder();
		char ch;
		for (int i = 0; i < str.length(); i++) {
			switch (str[i]) {
				case 0 :
					continue;
				case '\b':
					retval.Append("\\b");
					continue;
				 case '\t':
					retval.Append("\\t");
					continue;
				case '\n':
					retval.Append("\\n");
					continue;
				case '\f':
					retval.Append("\\f");
					continue;
				case '\r':
					retval.Append("\\r");
					continue;
				case '\"':
					retval.Append("\\\"");
					continue;
				case '\'':
					retval.Append("\\\'");
					continue;
				case '\\':
					retval.Append("\\\\");
					continue;
				default:
					if ((ch = str[i]) < 0x20 || ch > 0x7e) {
						string s = "0000" + System.Convert.ToString(ch, 16);
						retval.Append("\\u" + s.Substring(s.Length - 4, 4));
					} else {
						retval.append(ch);
					}
					continue;
			}
		}
			
		return retval.ToString();
	}
}
