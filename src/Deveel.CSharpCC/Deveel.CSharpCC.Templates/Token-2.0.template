/// <summary>
/// Represents a token from an input stream to parse
/// </summary>
[Serializable]
#if TOKEN_EXTENDS
${SUPPORT_CLASS_VISIBILITY_PUBLIC?public :}class Token : ${TOKEN_EXTENDS} {
#else
${SUPPORT_CLASS_VISIBILITY_PUBLIC?public :}class Token {
	public Token() {
	}

	public Token(int kind)
		: this(kind, null) {
	}

	public Token(int kind, string image) {
		Kind = kind;
		Image = image;
	}

#fi
	/// <summary>
	/// An integer that describes the kind of this token.
	/// </summary>
	/// <remarks>
	///  This numbering system is determined by CSharpCCParser, and a table of these 
	// numbers is stored in ...Constants class.
	/// </remarks>
	public int Kind { get; internal set; }

#if KEEP_LINE_COLUMN
	/// <summary>
	/// Gets the line number of the first character of the token.
	/// </summary>
	public int BeginLine { get; internal set; }
	
	/// <summary>
	/// Gets the column number of the first character of the token.
	/// </summary>
	public int BeginColumn { get; internal set; }
	
	/// <summary>
	/// Gets the line number of the last character of the token.
	/// </summary>
	public int EndLine { get; internal set; }
	
	/// <summary>
	/// Get the column number of the last character of the token.
	/// </summary>
	public int EndColumn { get; internal set; }
#fi
	/// <summary>
	/// The string image of the token.
	/// </summary>
	public string Image { get; internal set; }
	
	/// <summary>
	/// Gets a reference to the next regular (non-special) token from the 
	/// input stream.
	/// </summary>
	/// <remarks>
	/// If this is the last token from the input stream, or if the token manager has 
	/// not read tokens beyond this one, this field is set to null.  This is true only 
	/// if this token is also a regular token.
	/// </remarks>
	/// <seealso cref="SpecialToken"/>
	public Token Next { get; internal set; }
	
	/// <summary>
	/// Get special tokens that occur prior to this token, but after the immediately preceding 
	/// regular (non-special) token.
	/// </summary>
	/// <remarks>
	/// If there are no such special tokens, this field is set to null. When there are more 
	/// than one such special token, this field refers to the last of these special tokens, 
	/// which in turn refers to the next previous special token through its specialToken field, 
	/// and so on until the first special token (whose specialToken field is null).
	/// The next fields of special tokens refer to other special tokens that immediately follow 
	/// it (without an intervening regular token).  If there* is no such token, this is null.
	/// </remarks>
	public Token SpecialToken { get; internal set; }

	/// <summary>
	/// Gets an optional attribute value of the token.
	/// </summary>
	/// <remarks>
	/// Tokens which are not used as syntactic sugar will often contain* meaningful values that 
	/// will be used later on by the compiler or interpreter. This attribute value is often different 
	/// from the image. Any subclass of Token that actually wants to return a non-null value can
	/// override this method as appropriate.
	/// </remarks>
	public virtual object Value {
		get { return null; }
	}

	public override string ToString() {
		return Image;
	}

	public static Token NewToken(int ofKind, string image) {
		switch(ofKind) {
			default:
				return new Token(ofKind, image);
		}
	}

	public static Token NewToken(int ofKind) {
		return NewToken(ofKind, null);
	}
}